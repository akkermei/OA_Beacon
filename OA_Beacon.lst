   1               		.file	"OA_Beacon.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 115               	.global	__vector_5
 117               	__vector_5:
   1:OA_Beacon.c   **** //
   2:OA_Beacon.c   **** //  Beacon.c
   3:OA_Beacon.c   **** //
   4:OA_Beacon.c   **** //  Created by Atle Kleven on 31-07-2024.
   5:OA_Beacon.c   **** //  Copyright Atle Kleven 031-07-2024. All rights reserved.
   6:OA_Beacon.c   **** //
   7:OA_Beacon.c   **** 
   8:OA_Beacon.c   **** 
   9:OA_Beacon.c   **** 
  10:OA_Beacon.c   **** #include <stdint.h>
  11:OA_Beacon.c   **** #include <stdlib.h>
  12:OA_Beacon.c   **** #include <inttypes.h>
  13:OA_Beacon.c   **** #include <avr/interrupt.h>
  14:OA_Beacon.c   **** #include <avr/io.h>
  15:OA_Beacon.c   **** #include <avr/sleep.h>
  16:OA_Beacon.c   **** #include <util/delay.h>
  17:OA_Beacon.c   **** 
  18:OA_Beacon.c   **** #include "OA_Beacon.h"
  19:OA_Beacon.c   **** 
  20:OA_Beacon.c   **** 
  21:OA_Beacon.c   **** 
  22:OA_Beacon.c   **** /* Part 1: Macro definitions */
  23:OA_Beacon.c   **** 
  24:OA_Beacon.c   **** 	/* See also headder file */
  25:OA_Beacon.c   **** 
  26:OA_Beacon.c   **** /* Part 2: Variable definitions */
  27:OA_Beacon.c   **** 
  28:OA_Beacon.c   **** 
  29:OA_Beacon.c   **** /*
  30:OA_Beacon.c   ****  * Bits that are set inside interrupt routines, and watched outside in
  31:OA_Beacon.c   ****  * the program's main loop.
  32:OA_Beacon.c   ****  */
  33:OA_Beacon.c   **** volatile struct
  34:OA_Beacon.c   **** {
  35:OA_Beacon.c   ****   uint8_t tmr0_int: 1;
  36:OA_Beacon.c   ****   uint8_t tmr1_int: 1;
  37:OA_Beacon.c   ****   uint8_t anacomp_int: 1;
  38:OA_Beacon.c   ****   int8_t pinchange_int: 1;
  39:OA_Beacon.c   **** }
  40:OA_Beacon.c   **** intflags;
  41:OA_Beacon.c   **** 
  42:OA_Beacon.c   **** 
  43:OA_Beacon.c   **** 
  44:OA_Beacon.c   **** 
  45:OA_Beacon.c   **** /* Part 3: Interrupt service routines */
  46:OA_Beacon.c   **** 	
  47:OA_Beacon.c   **** 	
  48:OA_Beacon.c   **** ISR(TIM0_OVF_vect){
 119               	.LM0:
 120               	.LFBB1:
 121 0000 8F93 8FB7 		__gcc_isr 1
 121      8F93 
 122               	/* prologue: Signal */
 123               	/* frame size = 0 */
 124               	/* stack size = 0...4 */
 125               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  49:OA_Beacon.c   **** 	intflags.tmr0_int = 1;		/* Mark the occurence of timer0 overflow interrupt */
 127               	.LM1:
 128 0006 8091 0000 		lds r24,intflags
 129 000a 8160      		ori r24,lo8(1<<0)
 130 000c 8093 0000 		sts intflags,r24
 131               	/* epilogue start */
  50:OA_Beacon.c   **** 	}
 133               	.LM2:
 134 0010 8F91 8FBF 		__gcc_isr 2
 134      8F91 
 135 0016 1895      		reti
 136               		__gcc_isr 0,r24
 138               	.Lscope1:
 140               	.global	__vector_7
 142               	__vector_7:
  51:OA_Beacon.c   **** 
  52:OA_Beacon.c   **** ISR(ANA_COMP_vect){
 144               	.LM3:
 145               	.LFBB2:
 146 0018 8F93 8FB7 		__gcc_isr 1
 146      8F93 
 147               	/* prologue: Signal */
 148               	/* frame size = 0 */
 149               	/* stack size = 0...4 */
 150               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  53:OA_Beacon.c   ****     intflags.anacomp_int = 1; /* Mark the occurence of an analog comparator interrupt*/
 152               	.LM4:
 153 001e 8091 0000 		lds r24,intflags
 154 0022 8460      		ori r24,lo8(1<<2)
 155 0024 8093 0000 		sts intflags,r24
 156               	/* epilogue start */
  54:OA_Beacon.c   **** }
 158               	.LM5:
 159 0028 8F91 8FBF 		__gcc_isr 2
 159      8F91 
 160 002e 1895      		reti
 161               		__gcc_isr 0,r24
 163               	.Lscope2:
 165               	.global	__vector_2
 167               	__vector_2:
  55:OA_Beacon.c   **** 
  56:OA_Beacon.c   **** ISR(PCINT0_vect){
 169               	.LM6:
 170               	.LFBB3:
 171 0030 8F93 8FB7 		__gcc_isr 1
 171      8F93 
 172 0036 9F93      		push r25
 173               	/* prologue: Signal */
 174               	/* frame size = 0 */
 175               	/* stack size = 1...5 */
 176               	.L__stack_usage = 1 + __gcc_isr.n_pushed
  57:OA_Beacon.c   ****     intflags.pinchange_int = 1; /* Mark the occurence of a pin change interrupt*/
 178               	.LM7:
 179 0038 8091 0000 		lds r24,intflags
 180 003c 9FEF      		ldi r25,lo8(-1)
 181 003e 90FB      		bst r25,0
 182 0040 83F9      		bld r24,3
 183 0042 8093 0000 		sts intflags,r24
 184               	/* epilogue start */
  58:OA_Beacon.c   **** }
 186               	.LM8:
 187 0046 9F91      		pop r25
 188 0048 8F91 8FBF 		__gcc_isr 2
 188      8F91 
 189 004e 1895      		reti
 190               		__gcc_isr 0,r24
 192               	.Lscope3:
 193               		.section	.text.startup,"ax",@progbits
 195               	.global	main
 197               	main:
  59:OA_Beacon.c   **** 
  60:OA_Beacon.c   **** /* Part 4: Auxiliary functions */
  61:OA_Beacon.c   **** /* function to start the tomert0 conbnting to TOP and generatinmg an interrupt */
  62:OA_Beacon.c   **** // static void
  63:OA_Beacon.c   **** //   start_timer_to_TOP(void)
  64:OA_Beacon.c   **** //   {
  65:OA_Beacon.c   **** 
  66:OA_Beacon.c   **** //   }
  67:OA_Beacon.c   **** 
  68:OA_Beacon.c   **** 
  69:OA_Beacon.c   **** /*
  70:OA_Beacon.c   ****  * Do all the startup-time peripheral initializations.
  71:OA_Beacon.c   ****  */
  72:OA_Beacon.c   **** static void
  73:OA_Beacon.c   **** 	ioinit(void)
  74:OA_Beacon.c   **** {
  75:OA_Beacon.c   ****         /* if useing a 8 MHz clock with 8 prescaler (1000000MHz) */
  76:OA_Beacon.c   ****         /* Set MCU master clock prescaler to 64 for a CPU_FREQUENCY of 8MHz/64=125000Hz */
  77:OA_Beacon.c   ****         /* signal a clockchage */
  78:OA_Beacon.c   ****         CLKPR = _BV(7);
  79:OA_Beacon.c   ****         /* set prescaler to 64 */
  80:OA_Beacon.c   ****         CLKPR = _BV(CLKPS2) | _BV(CLKPS1);
  81:OA_Beacon.c   **** /* FUSE bit settings for this setup for avrdude
  82:OA_Beacon.c   ****  * -U lfuse:w:0x62:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
  83:OA_Beacon.c   ****  */
  84:OA_Beacon.c   ****         
  85:OA_Beacon.c   ****  /*
  86:OA_Beacon.c   ****    * Set up the 8-bit timer 0.
  87:OA_Beacon.c   ****    *
  88:OA_Beacon.c   ****    * Timer 0 will be set up prescaled with system clock / 1024
  89:OA_Beacon.c   ****    * producing a timer wrap around period of apporx 2 seconds
  90:OA_Beacon.c   ****    * up-counting until overflow where an overflow intererupt will be asserted (TOEI0 in TIMSK)
  91:OA_Beacon.c   ****    * The timer is set in fast pwm mode (WGM1 and WGM0 in TCCR0A)
  92:OA_Beacon.c   ****    * NO: Output compare interrupt at value of OCR0A (OCIE0A in TIMSK)
  93:OA_Beacon.c   ****    * Toggle pin OC0A (PB0) at counter compare match with OCR0A
  94:OA_Beacon.c   ****    * The timer0 will be started by setting the prescaler (CS02..0 in TCCR0B)
  95:OA_Beacon.c   ****    */
  96:OA_Beacon.c   ****    
  97:OA_Beacon.c   ****         /* set the timer to fast PWM mode */
  98:OA_Beacon.c   ****         TCCR0A |= _BV(WGM01) | _BV(WGM00);
  99:OA_Beacon.c   ****         /* Set to output compare match to set pin OC0A*/
 100:OA_Beacon.c   ****         TCCR0A |= _BV(COM0A1);
 101:OA_Beacon.c   ****         /* set the timer compare value to desired FLASH ON counter cycles*/
 102:OA_Beacon.c   ****         OCR0A = TMR0_PWM_TRESH;
 103:OA_Beacon.c   ****         /* Set the FLASH (OC0A) pin as output */
 104:OA_Beacon.c   ****         FLASH_DDR |= _BV(FLASH);
 105:OA_Beacon.c   ****         /* Enabel timer overflow interrupt*/
 106:OA_Beacon.c   ****         TIMSK |= _BV(TOIE0);
 107:OA_Beacon.c   ****         /* Start timing sequence by setting the prescaler */
 108:OA_Beacon.c   ****         TCCR0B |= TMR0_PRESC_V;
 109:OA_Beacon.c   ****  
 110:OA_Beacon.c   ****  /*
 111:OA_Beacon.c   ****   * Setup the analog comparator
 112:OA_Beacon.c   ****   * Reference voltage 1,1V from bandgap voltage
 113:OA_Beacon.c   ****   */
 114:OA_Beacon.c   ****         /* Make sure the ADC is turned off */
 115:OA_Beacon.c   ****         ADCSRA &= ~_BV(ADEN);
 116:OA_Beacon.c   ****         /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
 117:OA_Beacon.c   ****         ADCSRB |= _BV(ACME);
 118:OA_Beacon.c   ****         /* Set the adc multiplexer to pin PB3 */
 119:OA_Beacon.c   ****         ADMUX |= _BV(MUX1) | _BV(MUX0);
 120:OA_Beacon.c   ****         /* Enable the adc bandgap selector for the analog comparator */
 121:OA_Beacon.c   ****         ACSR |= _BV(ACBG);
 122:OA_Beacon.c   ****         /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
 123:OA_Beacon.c   ****         ADMUX |= _BV(REFS1);
 124:OA_Beacon.c   ****         /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
 125:OA_Beacon.c   ****         ACSR &= ~_BV(ACIS1) & ~_BV(ACIS0);
 126:OA_Beacon.c   ****         /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
 127:OA_Beacon.c   ****         DIDR0 |= _BV(ADC3D);
 128:OA_Beacon.c   ****         /* enable the analog comparator */
 129:OA_Beacon.c   ****         ACSR &= ~_BV(ACD);
 130:OA_Beacon.c   ****         /* Enable analog comparator interrupt */
 131:OA_Beacon.c   ****         ACSR |= _BV(ACIE);
 132:OA_Beacon.c   ****         
 133:OA_Beacon.c   ****         
 134:OA_Beacon.c   ****   
 135:OA_Beacon.c   ****   /* Enable pull-ups for binary inputs *
 136:OA_Beacon.c   ****    * Setting the PORTxn bits for pins configured as inputs,
 137:OA_Beacon.c   ****    * DDRxn = 0, enables pullup resistors.
 138:OA_Beacon.c   ****    */
 139:OA_Beacon.c   ****         
 140:OA_Beacon.c   ****         PORTB = _BV(ENABlE_FLASH_PIN);
 141:OA_Beacon.c   **** 
 142:OA_Beacon.c   ****   /*
 143:OA_Beacon.c   ****    * Enable Port outputs:
 144:OA_Beacon.c   ****    * setting the PORTxn bit enables the pin as output
 145:OA_Beacon.c   ****    */
 146:OA_Beacon.c   ****   
 147:OA_Beacon.c   ****    #if defined (__TestSetup_STK500__)
 148:OA_Beacon.c   ****       AMBIENT_LIGHT_DDR |= _BV(AMBIENT_LIGHT);
 149:OA_Beacon.c   ****    #endif
 150:OA_Beacon.c   **** 
 151:OA_Beacon.c   **** 	/* 
 152:OA_Beacon.c   **** 	 * Enable extrenal interrupts on the input pins
 153:OA_Beacon.c   **** 	 */
 154:OA_Beacon.c   **** 
 155:OA_Beacon.c   **** 	PCMSK |= _BV(PCINT4);
 156:OA_Beacon.c   **** 	/* Enable PIN Change interrupt */
 157:OA_Beacon.c   **** 	GIMSK |= _BV(PCIE); 
 158:OA_Beacon.c   **** 
 159:OA_Beacon.c   **** 
 160:OA_Beacon.c   **** 
 161:OA_Beacon.c   **** 
 162:OA_Beacon.c   ****   /* Start with idle sleep mode */
 163:OA_Beacon.c   ****     set_sleep_mode(SLEEP_MODE_IDLE);
 164:OA_Beacon.c   ****         
 165:OA_Beacon.c   **** 	sei();			/* enable interrupts */
 166:OA_Beacon.c   **** 
 167:OA_Beacon.c   **** 	
 168:OA_Beacon.c   **** } /* END ioinit */
 169:OA_Beacon.c   **** 
 170:OA_Beacon.c   **** 
 171:OA_Beacon.c   **** 
 172:OA_Beacon.c   **** /* Part 5: main() */
 173:OA_Beacon.c   **** 
 174:OA_Beacon.c   **** int
 175:OA_Beacon.c   **** main(void)
 176:OA_Beacon.c   **** {
 199               	.LM9:
 200               	.LFBB4:
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 205               	.LBB4:
 206               	.LBB5:
  78:OA_Beacon.c   ****         /* set prescaler to 64 */
 208               	.LM10:
 209 0000 80E8      		ldi r24,lo8(-128)
 210 0002 86BD      		out 0x26,r24
  80:OA_Beacon.c   **** /* FUSE bit settings for this setup for avrdude
 212               	.LM11:
 213 0004 86E0      		ldi r24,lo8(6)
 214 0006 86BD      		out 0x26,r24
  98:OA_Beacon.c   ****         /* Set to output compare match to set pin OC0A*/
 216               	.LM12:
 217 0008 8AB5      		in r24,0x2a
 218 000a 8360      		ori r24,lo8(3)
 219 000c 8ABD      		out 0x2a,r24
 100:OA_Beacon.c   ****         /* set the timer compare value to desired FLASH ON counter cycles*/
 221               	.LM13:
 222 000e 8AB5      		in r24,0x2a
 223 0010 8068      		ori r24,lo8(-128)
 224 0012 8ABD      		out 0x2a,r24
 102:OA_Beacon.c   ****         /* Set the FLASH (OC0A) pin as output */
 226               	.LM14:
 227 0014 8BE0      		ldi r24,lo8(11)
 228 0016 89BD      		out 0x29,r24
 104:OA_Beacon.c   ****         /* Enabel timer overflow interrupt*/
 230               	.LM15:
 231 0018 B89A      		sbi 0x17,0
 106:OA_Beacon.c   ****         /* Start timing sequence by setting the prescaler */
 233               	.LM16:
 234 001a 89B7      		in r24,0x39
 235 001c 8260      		ori r24,lo8(2)
 236 001e 89BF      		out 0x39,r24
 108:OA_Beacon.c   ****  
 238               	.LM17:
 239 0020 83B7      		in r24,0x33
 240 0022 8560      		ori r24,lo8(5)
 241 0024 83BF      		out 0x33,r24
 115:OA_Beacon.c   ****         /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
 243               	.LM18:
 244 0026 3798      		cbi 0x6,7
 117:OA_Beacon.c   ****         /* Set the adc multiplexer to pin PB3 */
 246               	.LM19:
 247 0028 1E9A      		sbi 0x3,6
 119:OA_Beacon.c   ****         /* Enable the adc bandgap selector for the analog comparator */
 249               	.LM20:
 250 002a 87B1      		in r24,0x7
 251 002c 8360      		ori r24,lo8(3)
 252 002e 87B9      		out 0x7,r24
 121:OA_Beacon.c   ****         /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
 254               	.LM21:
 255 0030 469A      		sbi 0x8,6
 123:OA_Beacon.c   ****         /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
 257               	.LM22:
 258 0032 3F9A      		sbi 0x7,7
 125:OA_Beacon.c   ****         /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
 260               	.LM23:
 261 0034 88B1      		in r24,0x8
 262 0036 8C7F      		andi r24,lo8(-4)
 263 0038 88B9      		out 0x8,r24
 127:OA_Beacon.c   ****         /* enable the analog comparator */
 265               	.LM24:
 266 003a A39A      		sbi 0x14,3
 129:OA_Beacon.c   ****         /* Enable analog comparator interrupt */
 268               	.LM25:
 269 003c 4798      		cbi 0x8,7
 131:OA_Beacon.c   ****         
 271               	.LM26:
 272 003e 439A      		sbi 0x8,3
 140:OA_Beacon.c   **** 
 274               	.LM27:
 275 0040 80E1      		ldi r24,lo8(16)
 276 0042 88BB      		out 0x18,r24
 155:OA_Beacon.c   **** 	/* Enable PIN Change interrupt */
 278               	.LM28:
 279 0044 AC9A      		sbi 0x15,4
 157:OA_Beacon.c   **** 
 281               	.LM29:
 282 0046 8BB7      		in r24,0x3b
 283 0048 8062      		ori r24,lo8(32)
 284 004a 8BBF      		out 0x3b,r24
 163:OA_Beacon.c   ****         
 286               	.LM30:
 287 004c 85B7      		in r24,0x35
 288 004e 877E      		andi r24,lo8(-25)
 289 0050 85BF      		out 0x35,r24
 165:OA_Beacon.c   **** 
 291               	.LM31:
 292               	/* #APP */
 293               	 ;  165 "OA_Beacon.c" 1
 294 0052 7894      		sei
 295               	 ;  0 "" 2
 296               	/* #NOAPP */
 297               	.LBE5:
 298               	.LBE4:
 177:OA_Beacon.c   ****   /*
 178:OA_Beacon.c   ****    * Our modus of operation.
 179:OA_Beacon.c   ****    * MODE_IDLE means we watch out for a change from the analog comparator
 180:OA_Beacon.c   ****    * MODE_DEEP_SLEEP means we are waiting to start the beacon
 181:OA_Beacon.c   ****    */
 182:OA_Beacon.c   ****  enum
 183:OA_Beacon.c   ****   {
 184:OA_Beacon.c   ****     MODE_IDLE,
 185:OA_Beacon.c   ****     MODE_WAIT,
 186:OA_Beacon.c   **** 	  MODE_CHANGE,
 187:OA_Beacon.c   ****     MODE_DEEP_SLEEP
 188:OA_Beacon.c   ****   } __attribute__((packed)) mode = MODE_DEEP_SLEEP;
 189:OA_Beacon.c   ****   
 190:OA_Beacon.c   ****      
 191:OA_Beacon.c   **** 
 192:OA_Beacon.c   ****     uint8_t wait_state = INITIAL_WAIT; // holds the number of blink sequences to wait before really
 193:OA_Beacon.c   ****     
 194:OA_Beacon.c   **** 
 195:OA_Beacon.c   **** 	/* initialize the hardware */
 196:OA_Beacon.c   ****   ioinit();
 197:OA_Beacon.c   **** 
 198:OA_Beacon.c   **** /* set the intfalgs.anacomp to initialize the state of the beacon */
 199:OA_Beacon.c   **** intflags.anacomp_int = 1;
 300               	.LM32:
 301 0054 8091 0000 		lds r24,intflags
 302 0058 8460      		ori r24,lo8(1<<2)
 303 005a 8093 0000 		sts intflags,r24
 192:OA_Beacon.c   ****     
 305               	.LM33:
 306 005e 95E0      		ldi r25,lo8(5)
 188:OA_Beacon.c   ****   
 308               	.LM34:
 309 0060 83E0      		ldi r24,lo8(3)
 200:OA_Beacon.c   **** 
 201:OA_Beacon.c   ****   for (;;)
 202:OA_Beacon.c   ****     {
 203:OA_Beacon.c   **** 		
 204:OA_Beacon.c   **** 		/* For all interrupts check the system status */   
 205:OA_Beacon.c   **** 		  switch (mode)
 206:OA_Beacon.c   **** 			{
 207:OA_Beacon.c   ****         case MODE_IDLE:
 208:OA_Beacon.c   ****                     /*
 209:OA_Beacon.c   ****                     * The Beacon is in DAY or NIGHT MODE 
 210:OA_Beacon.c   ****                     * A voltage passing between the 1.1V threshold on the AMBIENT_LIGHT_ADC pin sho
 211:OA_Beacon.c   ****                     */
 212:OA_Beacon.c   **** 
 213:OA_Beacon.c   ****                   /* If we get a pinchange interrupt in mode = MODE_IDLE we ingnore it*/
 214:OA_Beacon.c   ****                    if (intflags.pinchange_int)
 215:OA_Beacon.c   ****                     {
 216:OA_Beacon.c   ****                       intflags.pinchange_int = 0;
 217:OA_Beacon.c   ****                     }
 218:OA_Beacon.c   **** 
 219:OA_Beacon.c   ****                    /* Just check the staus of the ENABLE_FLASH_PIN */
 220:OA_Beacon.c   ****                     if (bit_is_clear(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 221:OA_Beacon.c   ****                       {
 222:OA_Beacon.c   ****                         /* shut down the beacon and set in deepsleep */
 223:OA_Beacon.c   ****                         set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 224:OA_Beacon.c   ****                         mode = MODE_DEEP_SLEEP;
 225:OA_Beacon.c   **** 
 226:OA_Beacon.c   ****                         /* do some cleanup*/
 227:OA_Beacon.c   ****                          /* disable the pwm and timer0 */
 228:OA_Beacon.c   ****                             /* disable the timer0 interrupt */
 229:OA_Beacon.c   ****                             TIMSK &= ~_BV(TOIE0);
 230:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 231:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_0;
 232:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 233:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 234:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 235:OA_Beacon.c   ****                             TCNT0 = 0;
 236:OA_Beacon.c   ****                             /* power down the timer0 */
 237:OA_Beacon.c   ****                             PRR |= _BV(PRTIM0);
 238:OA_Beacon.c   **** 
 239:OA_Beacon.c   ****                             /* disable the analog comparator interrupt*/
 240:OA_Beacon.c   ****                             ACSR &= ~_BV(ACIE);
 241:OA_Beacon.c   ****                             
 242:OA_Beacon.c   ****                            /* enable FLASH as output after disconnection from timer */
 243:OA_Beacon.c   ****                             FLASH_DDR |= _BV(FLASH);
 244:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 245:OA_Beacon.c   ****                             FLASHPORT &= ~_BV(FLASH);
 246:OA_Beacon.c   **** 
 247:OA_Beacon.c   ****                         break;
 248:OA_Beacon.c   ****                       }
 249:OA_Beacon.c   ****                         
 250:OA_Beacon.c   ****                         
 251:OA_Beacon.c   ****                       
 252:OA_Beacon.c   ****                       
 253:OA_Beacon.c   ****                     /* analog comparator interrupt flag set on toggle state*/
 254:OA_Beacon.c   ****                       if (intflags.anacomp_int)
 255:OA_Beacon.c   ****                       {
 256:OA_Beacon.c   ****                         /* an analog comparator interrupt has occured */
 257:OA_Beacon.c   ****                         /* reset the analog comparator interrupt flag */
 258:OA_Beacon.c   ****                         intflags.anacomp_int = 0;
 259:OA_Beacon.c   ****                         /* disable the analog comparator interrupt*/
 260:OA_Beacon.c   ****                         ACSR &= ~_BV(ACIE);
 261:OA_Beacon.c   **** 
 262:OA_Beacon.c   ****                         /* start the timer here to enable the wait state */
 263:OA_Beacon.c   ****                         /* power up the timer0 */
 264:OA_Beacon.c   ****                         PRR &= ~_BV(PRTIM0);
 265:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 266:OA_Beacon.c   ****                         TIMSK |= _BV(TOIE0);
 267:OA_Beacon.c   **** 
 268:OA_Beacon.c   ****                         /* check the status of the analog comparator and setup the current mode */
 269:OA_Beacon.c   ****                         if bit_is_set(ACSR, ACO){
 270:OA_Beacon.c   ****                             /* The analog comparator is positive (NIGHT) */
 271:OA_Beacon.c   **** 
 272:OA_Beacon.c   **** #if defined (__TestSetup_STK500__)                    
 273:OA_Beacon.c   ****   AMBIENT_LIGHT_PORT |= _BV(AMBIENT_LIGHT); // reflect this on the AMBIENT LIGHT PIN
 274:OA_Beacon.c   **** #endif
 275:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH */
 276:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 277:OA_Beacon.c   **** 
 278:OA_Beacon.c   ****                               /* enable the FLASH pin as output */
 279:OA_Beacon.c   ****                               FLASH_DDR |= _BV(FLASH);
 280:OA_Beacon.c   ****                               FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 281:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 282:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_V;                
 283:OA_Beacon.c   ****                         } 
 284:OA_Beacon.c   ****                             
 285:OA_Beacon.c   **** #if defined (__TestSetup_STK500__)
 286:OA_Beacon.c   ****                         else
 287:OA_Beacon.c   ****                             {
 288:OA_Beacon.c   ****                             /* The analog comparator is negative (DAY) */                    
 289:OA_Beacon.c   ****        AMBIENT_LIGHT_PORT &= ~_BV(AMBIENT_LIGHT);// reflect this on the AMBIENT LIGHT PIN
 290:OA_Beacon.c   ****                             } /* END else */
 291:OA_Beacon.c   **** #endif
 292:OA_Beacon.c   ****                             
 293:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 294:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_V;
 295:OA_Beacon.c   ****                         /* Change mode */
 296:OA_Beacon.c   ****                         mode = MODE_WAIT;
 297:OA_Beacon.c   **** 
 298:OA_Beacon.c   ****                       }       
 299:OA_Beacon.c   **** 				 break;
 300:OA_Beacon.c   **** 			
 301:OA_Beacon.c   ****       case MODE_WAIT:
 302:OA_Beacon.c   ****                 /* in this mode we wait some seconds before entering the new night or day mode */
 303:OA_Beacon.c   ****                 if (intflags.tmr0_int)
 304:OA_Beacon.c   ****                 {
 305:OA_Beacon.c   ****                   intflags.tmr0_int = 0;
 306:OA_Beacon.c   ****                   if (--wait_state == 0)
 307:OA_Beacon.c   ****                   { 
 308:OA_Beacon.c   ****                     wait_state = INITIAL_WAIT;
 309:OA_Beacon.c   ****                     mode = MODE_CHANGE; 
 310:OA_Beacon.c   ****                   }
 311:OA_Beacon.c   ****                 }
 312:OA_Beacon.c   ****                 
 313:OA_Beacon.c   ****           break;
 314:OA_Beacon.c   **** 			case MODE_CHANGE:
 315:OA_Beacon.c   ****                         /* check state of comparator after the wait to set the right mode */
 316:OA_Beacon.c   ****                         /* the state is detected even if the interrupt is disabled */
 317:OA_Beacon.c   ****                        if bit_is_set(ACSR, ACO){
 318:OA_Beacon.c   ****                             // FROM_DAY;
 319:OA_Beacon.c   ****                             /* last_mode == FROM_DAY */
 320:OA_Beacon.c   ****                             /* Enable the OCOA pin as output, start blinking */
 321:OA_Beacon.c   ****                             TCCR0A |= _BV(COM0A1);
 322:OA_Beacon.c   ****                         }
 323:OA_Beacon.c   ****                        else {
 324:OA_Beacon.c   ****                             // FROM_NIGHT;
 325:OA_Beacon.c   ****                             /* disable the pwm and timer0 */
 326:OA_Beacon.c   ****                             /* disable the timer0 interrupt */
 327:OA_Beacon.c   ****                             TIMSK &= ~_BV(TOIE0);
 328:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 329:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_0;
 311               	.LM35:
 312 0062 48EF      		ldi r20,lo8(-8)
 330:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 331:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 332:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 333:OA_Beacon.c   ****                             TCNT0 = 0;
 334:OA_Beacon.c   ****                             /* power down the timer0 */
 335:OA_Beacon.c   ****                             PRR |= _BV(PRTIM0);
 336:OA_Beacon.c   ****                             
 337:OA_Beacon.c   ****                            /* enable FLASH as output after disconnection from timer */
 338:OA_Beacon.c   ****                             FLASH_DDR |= _BV(FLASH);
 339:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 340:OA_Beacon.c   ****                             FLASHPORT &= ~_BV(FLASH);
 341:OA_Beacon.c   ****                             }
 342:OA_Beacon.c   ****                          
 343:OA_Beacon.c   ****                         
 344:OA_Beacon.c   ****                         /* change mode */
 345:OA_Beacon.c   ****                         mode = MODE_IDLE;
 346:OA_Beacon.c   ****                         /* Enable analog comparator interrupt */
 347:OA_Beacon.c   ****                         ACSR |= _BV(ACIE);                          
 348:OA_Beacon.c   ****        
 349:OA_Beacon.c   **** 					break;
 350:OA_Beacon.c   ****       case MODE_DEEP_SLEEP:
 351:OA_Beacon.c   ****                   /* check the status of the ENABLE_FLASH_PIN. Turn ON the Beacon? */
 352:OA_Beacon.c   ****                   if (intflags.pinchange_int)
 353:OA_Beacon.c   ****                   {
 354:OA_Beacon.c   ****                     intflags.pinchange_int = 0;
 355:OA_Beacon.c   ****                     if (bit_is_set(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 356:OA_Beacon.c   ****                     {
 357:OA_Beacon.c   ****                       /* set the intfalgs.anacomp to initialize the state of the beacon */
 358:OA_Beacon.c   ****                       intflags.anacomp_int = 1;
 359:OA_Beacon.c   ****                       /* sleep mode idle neede for the timer clocks to run */
 360:OA_Beacon.c   ****                       mode = MODE_IDLE;
 361:OA_Beacon.c   ****                       set_sleep_mode(SLEEP_MODE_IDLE);
 362:OA_Beacon.c   **** 
 363:OA_Beacon.c   ****                       /* start the timer to generate an interrupt to change mode*/
 364:OA_Beacon.c   ****                        /* power up the timer0 */
 365:OA_Beacon.c   ****                         PRR &= ~_BV(PRTIM0);
 366:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 367:OA_Beacon.c   ****                         TIMSK |= _BV(TOIE0);
 368:OA_Beacon.c   ****                         /* disconnect compare match from the output pin FLASH */
 369:OA_Beacon.c   ****                         TCCR0A &= ~_BV(COM0A1);
 370:OA_Beacon.c   ****                         /* reset the timer0 counter register */
 371:OA_Beacon.c   ****                         TCNT0 = 0;
 372:OA_Beacon.c   ****                         /* start timing sequence by setting the prescaler */
 373:OA_Beacon.c   ****                         TCCR0B = TMR0_PRESC_V;
 314               	.LM36:
 315 0064 35E0      		ldi r19,lo8(5)
 316               	.L14:
 205:OA_Beacon.c   **** 			{
 318               	.LM37:
 319 0066 8230      		cpi r24,lo8(2)
 320 0068 01F4      		brne .+2
 321 006a 00C0      		rjmp .L5
 322 006c 8330      		cpi r24,lo8(3)
 323 006e 01F4      		brne .+2
 324 0070 00C0      		rjmp .L6
 325 0072 8130      		cpi r24,lo8(1)
 326 0074 01F4      		brne .+2
 327 0076 00C0      		rjmp .L7
 214:OA_Beacon.c   ****                     {
 329               	.LM38:
 330 0078 8091 0000 		lds r24,intflags
 214:OA_Beacon.c   ****                     {
 332               	.LM39:
 333 007c 83FF      		sbrs r24,3
 334 007e 00C0      		rjmp .L8
 216:OA_Beacon.c   ****                     }
 336               	.LM40:
 337 0080 8091 0000 		lds r24,intflags
 338 0084 877F      		andi r24,lo8(~(1<<3))
 339 0086 8093 0000 		sts intflags,r24
 340               	.L8:
 220:OA_Beacon.c   ****                       {
 342               	.LM41:
 343 008a B499      		sbic 0x16,4
 344 008c 00C0      		rjmp .L9
 223:OA_Beacon.c   ****                         mode = MODE_DEEP_SLEEP;
 346               	.LM42:
 347 008e 85B7      		in r24,0x35
 348 0090 877E      		andi r24,lo8(-25)
 349 0092 8061      		ori r24,lo8(16)
 350 0094 85BF      		out 0x35,r24
 229:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 352               	.LM43:
 353 0096 89B7      		in r24,0x39
 354 0098 8D7F      		andi r24,lo8(-3)
 355 009a 89BF      		out 0x39,r24
 231:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 357               	.LM44:
 358 009c 43BF      		out 0x33,r20
 233:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 360               	.LM45:
 361 009e 8AB5      		in r24,0x2a
 362 00a0 8F77      		andi r24,lo8(127)
 363 00a2 8ABD      		out 0x2a,r24
 235:OA_Beacon.c   ****                             /* power down the timer0 */
 365               	.LM46:
 366 00a4 12BE      		out 0x32,__zero_reg__
 237:OA_Beacon.c   **** 
 368               	.LM47:
 369 00a6 80B5      		in r24,0x20
 370 00a8 8460      		ori r24,lo8(4)
 371 00aa 80BD      		out 0x20,r24
 240:OA_Beacon.c   ****                             
 373               	.LM48:
 374 00ac 4398      		cbi 0x8,3
 243:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 376               	.LM49:
 377 00ae B89A      		sbi 0x17,0
 245:OA_Beacon.c   **** 
 379               	.LM50:
 380 00b0 C098      		cbi 0x18,0
 224:OA_Beacon.c   **** 
 382               	.LM51:
 383 00b2 83E0      		ldi r24,lo8(3)
 384               	.L10:
 374:OA_Beacon.c   ****                       
 375:OA_Beacon.c   ****                       /* Enable analog comparator interrupt */
 376:OA_Beacon.c   ****                         ACSR |= _BV(ACIE);     
 377:OA_Beacon.c   **** 
 378:OA_Beacon.c   ****                     }
 379:OA_Beacon.c   ****                   }
 380:OA_Beacon.c   ****             break;
 381:OA_Beacon.c   ****                   
 382:OA_Beacon.c   ****                   
 383:OA_Beacon.c   **** 			}
 384:OA_Beacon.c   **** 			/*end case */
 385:OA_Beacon.c   ****         
 386:OA_Beacon.c   ****         /* The analog comparator is only enabled in the idle sleep mode (SLEEP_MODE_IDLE) */
 387:OA_Beacon.c   ****         /* Put the MCU in sleep and wait for next interrupt */
 388:OA_Beacon.c   ****         sleep_mode();
 386               	.LM52:
 387 00b4 25B7      		in r18,0x35
 388 00b6 2062      		ori r18,lo8(32)
 389 00b8 25BF      		out 0x35,r18
 390               	/* #APP */
 391               	 ;  388 "OA_Beacon.c" 1
 392 00ba 8895      		sleep
 393               		
 394               	 ;  0 "" 2
 395               	/* #NOAPP */
 396 00bc 25B7      		in r18,0x35
 397 00be 2F7D      		andi r18,lo8(-33)
 398 00c0 25BF      		out 0x35,r18
 205:OA_Beacon.c   **** 			{
 400               	.LM53:
 401 00c2 00C0      		rjmp .L14
 402               	.L9:
 254:OA_Beacon.c   ****                       {
 404               	.LM54:
 405 00c4 8091 0000 		lds r24,intflags
 254:OA_Beacon.c   ****                       {
 407               	.LM55:
 408 00c8 82FF      		sbrs r24,2
 409 00ca 00C0      		rjmp .L15
 258:OA_Beacon.c   ****                         /* disable the analog comparator interrupt*/
 411               	.LM56:
 412 00cc 8091 0000 		lds r24,intflags
 413 00d0 8B7F      		andi r24,lo8(~(1<<2))
 414 00d2 8093 0000 		sts intflags,r24
 260:OA_Beacon.c   **** 
 416               	.LM57:
 417 00d6 4398      		cbi 0x8,3
 264:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 419               	.LM58:
 420 00d8 80B5      		in r24,0x20
 421 00da 8B7F      		andi r24,lo8(-5)
 422 00dc 80BD      		out 0x20,r24
 266:OA_Beacon.c   **** 
 424               	.LM59:
 425 00de 89B7      		in r24,0x39
 426 00e0 8260      		ori r24,lo8(2)
 427 00e2 89BF      		out 0x39,r24
 269:OA_Beacon.c   ****                             /* The analog comparator is positive (NIGHT) */
 429               	.LM60:
 430 00e4 459B      		sbis 0x8,5
 431 00e6 00C0      		rjmp .L11
 276:OA_Beacon.c   **** 
 433               	.LM61:
 434 00e8 8AB5      		in r24,0x2a
 435 00ea 8F77      		andi r24,lo8(127)
 436 00ec 8ABD      		out 0x2a,r24
 279:OA_Beacon.c   ****                               FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 438               	.LM62:
 439 00ee B89A      		sbi 0x17,0
 280:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 441               	.LM63:
 442 00f0 C098      		cbi 0x18,0
 282:OA_Beacon.c   ****                         } 
 444               	.LM64:
 445 00f2 33BF      		out 0x33,r19
 446               	.L11:
 294:OA_Beacon.c   ****                         /* Change mode */
 448               	.LM65:
 449 00f4 33BF      		out 0x33,r19
 296:OA_Beacon.c   **** 
 451               	.LM66:
 452 00f6 81E0      		ldi r24,lo8(1)
 453 00f8 00C0      		rjmp .L10
 454               	.L7:
 303:OA_Beacon.c   ****                 {
 456               	.LM67:
 457 00fa 2091 0000 		lds r18,intflags
 303:OA_Beacon.c   ****                 {
 459               	.LM68:
 460 00fe 20FF      		sbrs r18,0
 461 0100 00C0      		rjmp .L10
 305:OA_Beacon.c   ****                   if (--wait_state == 0)
 463               	.LM69:
 464 0102 2091 0000 		lds r18,intflags
 465 0106 2E7F      		andi r18,lo8(~(1<<0))
 466 0108 2093 0000 		sts intflags,r18
 306:OA_Beacon.c   ****                   { 
 468               	.LM70:
 469 010c 9150      		subi r25,lo8(-(-1))
 470 010e 01F4      		brne .L10
 308:OA_Beacon.c   ****                     mode = MODE_CHANGE; 
 472               	.LM71:
 473 0110 95E0      		ldi r25,lo8(5)
 309:OA_Beacon.c   ****                   }
 475               	.LM72:
 476 0112 82E0      		ldi r24,lo8(2)
 477 0114 00C0      		rjmp .L10
 478               	.L5:
 317:OA_Beacon.c   ****                             // FROM_DAY;
 480               	.LM73:
 481 0116 459B      		sbis 0x8,5
 482 0118 00C0      		rjmp .L12
 321:OA_Beacon.c   ****                         }
 484               	.LM74:
 485 011a 8AB5      		in r24,0x2a
 486 011c 8068      		ori r24,lo8(-128)
 487 011e 8ABD      		out 0x2a,r24
 488               	.L31:
 376:OA_Beacon.c   **** 
 490               	.LM75:
 491 0120 439A      		sbi 0x8,3
 492               	.L15:
 493 0122 80E0      		ldi r24,0
 494 0124 00C0      		rjmp .L10
 495               	.L12:
 327:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 497               	.LM76:
 498 0126 89B7      		in r24,0x39
 499 0128 8D7F      		andi r24,lo8(-3)
 500 012a 89BF      		out 0x39,r24
 329:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 502               	.LM77:
 503 012c 43BF      		out 0x33,r20
 331:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 505               	.LM78:
 506 012e 8AB5      		in r24,0x2a
 507 0130 8F77      		andi r24,lo8(127)
 508 0132 8ABD      		out 0x2a,r24
 333:OA_Beacon.c   ****                             /* power down the timer0 */
 510               	.LM79:
 511 0134 12BE      		out 0x32,__zero_reg__
 335:OA_Beacon.c   ****                             
 513               	.LM80:
 514 0136 80B5      		in r24,0x20
 515 0138 8460      		ori r24,lo8(4)
 516 013a 80BD      		out 0x20,r24
 338:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 518               	.LM81:
 519 013c B89A      		sbi 0x17,0
 340:OA_Beacon.c   ****                             }
 521               	.LM82:
 522 013e C098      		cbi 0x18,0
 523 0140 00C0      		rjmp .L31
 524               	.L6:
 352:OA_Beacon.c   ****                   {
 526               	.LM83:
 527 0142 2091 0000 		lds r18,intflags
 352:OA_Beacon.c   ****                   {
 529               	.LM84:
 530 0146 23FF      		sbrs r18,3
 531 0148 00C0      		rjmp .L10
 354:OA_Beacon.c   ****                     if (bit_is_set(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 533               	.LM85:
 534 014a 2091 0000 		lds r18,intflags
 535 014e 277F      		andi r18,lo8(~(1<<3))
 536 0150 2093 0000 		sts intflags,r18
 355:OA_Beacon.c   ****                     {
 538               	.LM86:
 539 0154 B49B      		sbis 0x16,4
 540 0156 00C0      		rjmp .L10
 358:OA_Beacon.c   ****                       /* sleep mode idle neede for the timer clocks to run */
 542               	.LM87:
 543 0158 8091 0000 		lds r24,intflags
 544 015c 8460      		ori r24,lo8(1<<2)
 545 015e 8093 0000 		sts intflags,r24
 361:OA_Beacon.c   **** 
 547               	.LM88:
 548 0162 85B7      		in r24,0x35
 549 0164 877E      		andi r24,lo8(-25)
 550 0166 85BF      		out 0x35,r24
 365:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 552               	.LM89:
 553 0168 80B5      		in r24,0x20
 554 016a 8B7F      		andi r24,lo8(-5)
 555 016c 80BD      		out 0x20,r24
 367:OA_Beacon.c   ****                         /* disconnect compare match from the output pin FLASH */
 557               	.LM90:
 558 016e 89B7      		in r24,0x39
 559 0170 8260      		ori r24,lo8(2)
 560 0172 89BF      		out 0x39,r24
 369:OA_Beacon.c   ****                         /* reset the timer0 counter register */
 562               	.LM91:
 563 0174 8AB5      		in r24,0x2a
 564 0176 8F77      		andi r24,lo8(127)
 565 0178 8ABD      		out 0x2a,r24
 371:OA_Beacon.c   ****                         /* start timing sequence by setting the prescaler */
 567               	.LM92:
 568 017a 12BE      		out 0x32,__zero_reg__
 373:OA_Beacon.c   ****                       
 570               	.LM93:
 571 017c 33BF      		out 0x33,r19
 572 017e 00C0      		rjmp .L31
 578               	.Lscope4:
 579               		.comm	intflags,1,1
 581               		.text
 583               	.Letext0:
 584               		.ident	"GCC: (Homebrew AVR GCC 9.4.0_1) 9.4.0"
 585               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 OA_Beacon.c
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:2      *ABS*:0000003e __SP_H__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:3      *ABS*:0000003d __SP_L__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:4      *ABS*:0000003f __SREG__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:6      *ABS*:00000001 __zero_reg__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:117    .text:00000000 __vector_5
                            *ABS*:00000002 __gcc_isr.n_pushed.001
                            *COM*:00000001 intflags
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:142    .text:00000018 __vector_7
                            *ABS*:00000002 __gcc_isr.n_pushed.002
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:167    .text:00000030 __vector_2
                            *ABS*:00000002 __gcc_isr.n_pushed.003
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:197    .text.startup:00000000 main
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:320    .text.startup:0000006a L0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:323    .text.startup:00000070 L0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:326    .text.startup:00000076 L0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:9      .text:00000000 .Ltext0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:119    .text:00000000 .LM0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:127    .text:00000006 .LM1
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:133    .text:00000010 .LM2
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:144    .text:00000018 .LM3
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:152    .text:0000001e .LM4
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:158    .text:00000028 .LM5
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:169    .text:00000030 .LM6
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:178    .text:00000038 .LM7
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:186    .text:00000046 .LM8
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:199    .text.startup:00000000 .LM9
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:208    .text.startup:00000000 .LM10
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:212    .text.startup:00000004 .LM11
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:216    .text.startup:00000008 .LM12
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:221    .text.startup:0000000e .LM13
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:226    .text.startup:00000014 .LM14
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:230    .text.startup:00000018 .LM15
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:233    .text.startup:0000001a .LM16
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:238    .text.startup:00000020 .LM17
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:243    .text.startup:00000026 .LM18
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:246    .text.startup:00000028 .LM19
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:249    .text.startup:0000002a .LM20
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:254    .text.startup:00000030 .LM21
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:257    .text.startup:00000032 .LM22
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:260    .text.startup:00000034 .LM23
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:265    .text.startup:0000003a .LM24
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:268    .text.startup:0000003c .LM25
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:271    .text.startup:0000003e .LM26
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:274    .text.startup:00000040 .LM27
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:278    .text.startup:00000044 .LM28
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:281    .text.startup:00000046 .LM29
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:286    .text.startup:0000004c .LM30
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:291    .text.startup:00000052 .LM31
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:300    .text.startup:00000054 .LM32
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:305    .text.startup:0000005e .LM33
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:308    .text.startup:00000060 .LM34
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:311    .text.startup:00000062 .LM35
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:314    .text.startup:00000064 .LM36
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:318    .text.startup:00000066 .LM37
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:329    .text.startup:00000078 .LM38
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:332    .text.startup:0000007c .LM39
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:336    .text.startup:00000080 .LM40
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:342    .text.startup:0000008a .LM41
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:346    .text.startup:0000008e .LM42
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:352    .text.startup:00000096 .LM43
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:357    .text.startup:0000009c .LM44
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:360    .text.startup:0000009e .LM45
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:365    .text.startup:000000a4 .LM46
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:368    .text.startup:000000a6 .LM47
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:373    .text.startup:000000ac .LM48
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:376    .text.startup:000000ae .LM49
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:379    .text.startup:000000b0 .LM50
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:382    .text.startup:000000b2 .LM51
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:386    .text.startup:000000b4 .LM52
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:400    .text.startup:000000c2 .LM53
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:404    .text.startup:000000c4 .LM54
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:407    .text.startup:000000c8 .LM55
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:411    .text.startup:000000cc .LM56
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:416    .text.startup:000000d6 .LM57
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:419    .text.startup:000000d8 .LM58
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:424    .text.startup:000000de .LM59
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:429    .text.startup:000000e4 .LM60
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:433    .text.startup:000000e8 .LM61
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:438    .text.startup:000000ee .LM62
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:441    .text.startup:000000f0 .LM63
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:444    .text.startup:000000f2 .LM64
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:448    .text.startup:000000f4 .LM65
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:451    .text.startup:000000f6 .LM66
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:456    .text.startup:000000fa .LM67
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:459    .text.startup:000000fe .LM68
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:463    .text.startup:00000102 .LM69
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:468    .text.startup:0000010c .LM70
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:472    .text.startup:00000110 .LM71
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:475    .text.startup:00000112 .LM72
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:480    .text.startup:00000116 .LM73
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:484    .text.startup:0000011a .LM74
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:490    .text.startup:00000120 .LM75
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:497    .text.startup:00000126 .LM76
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:502    .text.startup:0000012c .LM77
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:505    .text.startup:0000012e .LM78
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:510    .text.startup:00000134 .LM79
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:513    .text.startup:00000136 .LM80
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:518    .text.startup:0000013c .LM81
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:521    .text.startup:0000013e .LM82
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:526    .text.startup:00000142 .LM83
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:529    .text.startup:00000146 .LM84
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:533    .text.startup:0000014a .LM85
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:538    .text.startup:00000154 .LM86
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:542    .text.startup:00000158 .LM87
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:547    .text.startup:00000162 .LM88
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:552    .text.startup:00000168 .LM89
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:557    .text.startup:0000016e .LM90
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:562    .text.startup:00000174 .LM91
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:567    .text.startup:0000017a .LM92
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:570    .text.startup:0000017c .LM93
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:578    .text.startup:00000180 .Lscope4
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:583    .text:00000050 .Letext0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:478    .text.startup:00000116 .L5
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:524    .text.startup:00000142 .L6
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:454    .text.startup:000000fa .L7
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:340    .text.startup:0000008a .L8
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:402    .text.startup:000000c4 .L9
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:316    .text.startup:00000066 .L14
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:492    .text.startup:00000122 .L15
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:446    .text.startup:000000f4 .L11
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:384    .text.startup:000000b4 .L10
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:495    .text.startup:00000126 .L12
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccIunFus.s:488    .text.startup:00000120 .L31

UNDEFINED SYMBOLS
__do_clear_bss

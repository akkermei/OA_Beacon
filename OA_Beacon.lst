   1               		.file	"OA_Beacon.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 115               	.global	__vector_5
 117               	__vector_5:
   1:OA_Beacon.c   **** //
   2:OA_Beacon.c   **** //  Beacon.c
   3:OA_Beacon.c   **** //
   4:OA_Beacon.c   **** //  Created by Atle Kleven on 31-07-2024.
   5:OA_Beacon.c   **** //  Copyright Atle Kleven 031-07-2024. All rights reserved.
   6:OA_Beacon.c   **** //
   7:OA_Beacon.c   **** 
   8:OA_Beacon.c   **** 
   9:OA_Beacon.c   **** 
  10:OA_Beacon.c   **** #include <stdint.h>
  11:OA_Beacon.c   **** #include <stdlib.h>
  12:OA_Beacon.c   **** #include <inttypes.h>
  13:OA_Beacon.c   **** #include <avr/interrupt.h>
  14:OA_Beacon.c   **** #include <avr/io.h>
  15:OA_Beacon.c   **** #include <avr/sleep.h>
  16:OA_Beacon.c   **** #include <util/delay.h>
  17:OA_Beacon.c   **** 
  18:OA_Beacon.c   **** #include "OA_Beacon.h"
  19:OA_Beacon.c   **** 
  20:OA_Beacon.c   **** 
  21:OA_Beacon.c   **** 
  22:OA_Beacon.c   **** /* Part 1: Macro definitions */
  23:OA_Beacon.c   **** 
  24:OA_Beacon.c   **** 	/* See also headder file */
  25:OA_Beacon.c   **** 
  26:OA_Beacon.c   **** /* Part 2: Variable definitions */
  27:OA_Beacon.c   **** 
  28:OA_Beacon.c   **** 
  29:OA_Beacon.c   **** /*
  30:OA_Beacon.c   ****  * Bits that are set inside interrupt routines, and watched outside in
  31:OA_Beacon.c   ****  * the program's main loop.
  32:OA_Beacon.c   ****  */
  33:OA_Beacon.c   **** volatile struct
  34:OA_Beacon.c   **** {
  35:OA_Beacon.c   ****   uint8_t tmr0_int: 1;
  36:OA_Beacon.c   ****   uint8_t tmr1_int: 1;
  37:OA_Beacon.c   ****   uint8_t anacomp_int: 1;
  38:OA_Beacon.c   ****   int8_t pinchange_int: 1;
  39:OA_Beacon.c   **** }
  40:OA_Beacon.c   **** intflags;
  41:OA_Beacon.c   **** 
  42:OA_Beacon.c   **** 
  43:OA_Beacon.c   **** 
  44:OA_Beacon.c   **** 
  45:OA_Beacon.c   **** /* Part 3: Interrupt service routines */
  46:OA_Beacon.c   **** 	
  47:OA_Beacon.c   **** 	
  48:OA_Beacon.c   **** ISR(TIM0_OVF_vect){
 119               	.LM0:
 120               	.LFBB1:
 121 0000 1F92      		push r1
 122 0002 0F92      		push r0
 123 0004 0FB6      		in r0,__SREG__
 124 0006 0F92      		push r0
 125 0008 1124      		clr __zero_reg__
 126 000a 8F93      		push r24
 127               	/* prologue: Signal */
 128               	/* frame size = 0 */
 129               	/* stack size = 4 */
 130               	.L__stack_usage = 4
  49:OA_Beacon.c   **** 	intflags.tmr0_int = 1;		/* Mark the occurence of timer0 overflow interrupt */
 132               	.LM1:
 133 000c 8091 0000 		lds r24,intflags
 134 0010 8160      		ori r24,lo8(1<<0)
 135 0012 8093 0000 		sts intflags,r24
 136               	/* epilogue start */
  50:OA_Beacon.c   **** 	}
 138               	.LM2:
 139 0016 8F91      		pop r24
 140 0018 0F90      		pop r0
 141 001a 0FBE      		out __SREG__,r0
 142 001c 0F90      		pop r0
 143 001e 1F90      		pop r1
 144 0020 1895      		reti
 146               	.Lscope1:
 148               	.global	__vector_7
 150               	__vector_7:
  51:OA_Beacon.c   **** 
  52:OA_Beacon.c   **** ISR(ANA_COMP_vect){
 152               	.LM3:
 153               	.LFBB2:
 154 0022 1F92      		push r1
 155 0024 0F92      		push r0
 156 0026 0FB6      		in r0,__SREG__
 157 0028 0F92      		push r0
 158 002a 1124      		clr __zero_reg__
 159 002c 8F93      		push r24
 160               	/* prologue: Signal */
 161               	/* frame size = 0 */
 162               	/* stack size = 4 */
 163               	.L__stack_usage = 4
  53:OA_Beacon.c   ****     intflags.anacomp_int = 1; /* Mark the occurence of an analog comparator interrupt*/
 165               	.LM4:
 166 002e 8091 0000 		lds r24,intflags
 167 0032 8460      		ori r24,lo8(1<<2)
 168 0034 8093 0000 		sts intflags,r24
 169               	/* epilogue start */
  54:OA_Beacon.c   **** }
 171               	.LM5:
 172 0038 8F91      		pop r24
 173 003a 0F90      		pop r0
 174 003c 0FBE      		out __SREG__,r0
 175 003e 0F90      		pop r0
 176 0040 1F90      		pop r1
 177 0042 1895      		reti
 179               	.Lscope2:
 181               	.global	__vector_2
 183               	__vector_2:
  55:OA_Beacon.c   **** 
  56:OA_Beacon.c   **** ISR(PCINT0_vect){
 185               	.LM6:
 186               	.LFBB3:
 187 0044 1F92      		push r1
 188 0046 0F92      		push r0
 189 0048 0FB6      		in r0,__SREG__
 190 004a 0F92      		push r0
 191 004c 1124      		clr __zero_reg__
 192 004e 8F93      		push r24
 193 0050 9F93      		push r25
 194               	/* prologue: Signal */
 195               	/* frame size = 0 */
 196               	/* stack size = 5 */
 197               	.L__stack_usage = 5
  57:OA_Beacon.c   ****     intflags.pinchange_int = 1; /* Mark the occurence of a pin change interrupt*/
 199               	.LM7:
 200 0052 8091 0000 		lds r24,intflags
 201 0056 9FEF      		ldi r25,lo8(-1)
 202 0058 90FB      		bst r25,0
 203 005a 83F9      		bld r24,3
 204 005c 8093 0000 		sts intflags,r24
 205               	/* epilogue start */
  58:OA_Beacon.c   **** }
 207               	.LM8:
 208 0060 9F91      		pop r25
 209 0062 8F91      		pop r24
 210 0064 0F90      		pop r0
 211 0066 0FBE      		out __SREG__,r0
 212 0068 0F90      		pop r0
 213 006a 1F90      		pop r1
 214 006c 1895      		reti
 216               	.Lscope3:
 217               		.section	.text.startup,"ax",@progbits
 219               	.global	main
 221               	main:
  59:OA_Beacon.c   **** 
  60:OA_Beacon.c   **** /* Part 4: Auxiliary functions */
  61:OA_Beacon.c   **** /* function to start the tomert0 conbnting to TOP and generatinmg an interrupt */
  62:OA_Beacon.c   **** // static void
  63:OA_Beacon.c   **** //   start_timer_to_TOP(void)
  64:OA_Beacon.c   **** //   {
  65:OA_Beacon.c   **** 
  66:OA_Beacon.c   **** //   }
  67:OA_Beacon.c   **** 
  68:OA_Beacon.c   **** 
  69:OA_Beacon.c   **** /*
  70:OA_Beacon.c   ****  * Do all the startup-time peripheral initializations.
  71:OA_Beacon.c   ****  */
  72:OA_Beacon.c   **** static void
  73:OA_Beacon.c   **** 	ioinit(void)
  74:OA_Beacon.c   **** {
  75:OA_Beacon.c   ****         /* if useing a 8 MHz clock with 8 prescaler (1000000MHz) */
  76:OA_Beacon.c   ****         /* Set MCU master clock prescaler to 64 for a CPU_FREQUENCY of 8MHz/64=125000Hz */
  77:OA_Beacon.c   ****         /* signal a clockchage */
  78:OA_Beacon.c   ****         CLKPR = _BV(7);
  79:OA_Beacon.c   ****         /* set prescaler to 64 */
  80:OA_Beacon.c   ****         CLKPR = _BV(CLKPS2) | _BV(CLKPS1);
  81:OA_Beacon.c   **** /* FUSE bit settings for this setup for avrdude
  82:OA_Beacon.c   ****  * -U lfuse:w:0x62:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
  83:OA_Beacon.c   ****  */
  84:OA_Beacon.c   ****         
  85:OA_Beacon.c   ****  /*
  86:OA_Beacon.c   ****    * Set up the 8-bit timer 0.
  87:OA_Beacon.c   ****    *
  88:OA_Beacon.c   ****    * Timer 0 will be set up prescaled with system clock / 1024
  89:OA_Beacon.c   ****    * producing a timer wrap around period of apporx 2 seconds
  90:OA_Beacon.c   ****    * up-counting until overflow where an overflow intererupt will be asserted (TOEI0 in TIMSK)
  91:OA_Beacon.c   ****    * The timer is set in fast pwm mode (WGM1 and WGM0 in TCCR0A)
  92:OA_Beacon.c   ****    * NO: Output compare interrupt at value of OCR0A (OCIE0A in TIMSK)
  93:OA_Beacon.c   ****    * Toggle pin OC0A (PB0) at counter compare match with OCR0A
  94:OA_Beacon.c   ****    * The timer0 will be started by setting the prescaler (CS02..0 in TCCR0B)
  95:OA_Beacon.c   ****    */
  96:OA_Beacon.c   ****    
  97:OA_Beacon.c   ****         /* set the timer to fast PWM mode */
  98:OA_Beacon.c   ****         TCCR0A |= _BV(WGM01) | _BV(WGM00);
  99:OA_Beacon.c   ****         /* Set to output compare match to set pin OC0A*/
 100:OA_Beacon.c   ****         TCCR0A |= _BV(COM0A1);
 101:OA_Beacon.c   ****         /* set the timer compare value to desired FLASH ON counter cycles*/
 102:OA_Beacon.c   ****         OCR0A = TMR0_PWM_TRESH;
 103:OA_Beacon.c   ****         /* Set the FLASH (OC0A) pin as output */
 104:OA_Beacon.c   ****         FLASH_DDR |= _BV(FLASH);
 105:OA_Beacon.c   ****         /* Enabel timer overflow interrupt*/
 106:OA_Beacon.c   ****         TIMSK |= _BV(TOIE0);
 107:OA_Beacon.c   ****         /* Start timing sequence by setting the prescaler */
 108:OA_Beacon.c   ****         TCCR0B |= TMR0_PRESC_V;
 109:OA_Beacon.c   ****  
 110:OA_Beacon.c   ****  /*
 111:OA_Beacon.c   ****   * Setup the analog comparator
 112:OA_Beacon.c   ****   * Reference voltage 1,1V from bandgap voltage
 113:OA_Beacon.c   ****   */
 114:OA_Beacon.c   ****         /* Make sure the ADC is turned off */
 115:OA_Beacon.c   ****         ADCSRA &= ~_BV(ADEN);
 116:OA_Beacon.c   ****         /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
 117:OA_Beacon.c   ****         ADCSRB |= _BV(ACME);
 118:OA_Beacon.c   ****         /* Set the adc multiplexer to pin PB3 */
 119:OA_Beacon.c   ****         ADMUX |= _BV(MUX1) | _BV(MUX0);
 120:OA_Beacon.c   ****         /* Enable the adc bandgap selector for the analog comparator */
 121:OA_Beacon.c   ****         ACSR |= _BV(ACBG);
 122:OA_Beacon.c   ****         /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
 123:OA_Beacon.c   ****         ADMUX |= _BV(REFS1);
 124:OA_Beacon.c   ****         /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
 125:OA_Beacon.c   ****         ACSR &= ~_BV(ACIS1) & ~_BV(ACIS0);
 126:OA_Beacon.c   ****         /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
 127:OA_Beacon.c   ****         DIDR0 |= _BV(ADC3D);
 128:OA_Beacon.c   ****         /* enable the analog comparator */
 129:OA_Beacon.c   ****         ACSR &= ~_BV(ACD);
 130:OA_Beacon.c   ****         /* Enable analog comparator interrupt */
 131:OA_Beacon.c   ****         ACSR |= _BV(ACIE);
 132:OA_Beacon.c   ****         
 133:OA_Beacon.c   ****         
 134:OA_Beacon.c   ****   
 135:OA_Beacon.c   ****   /* Enable pull-ups for binary inputs *
 136:OA_Beacon.c   ****    * Setting the PORTxn bits for pins configured as inputs,
 137:OA_Beacon.c   ****    * DDRxn = 0, enables pullup resistors.
 138:OA_Beacon.c   ****    */
 139:OA_Beacon.c   ****         
 140:OA_Beacon.c   ****         PORTB = _BV(ENABlE_FLASH_PIN);
 141:OA_Beacon.c   **** 
 142:OA_Beacon.c   ****   /*
 143:OA_Beacon.c   ****    * Enable Port outputs:
 144:OA_Beacon.c   ****    * setting the PORTxn bit enables the pin as output
 145:OA_Beacon.c   ****    */
 146:OA_Beacon.c   ****   
 147:OA_Beacon.c   ****    #if defined (__TestSetup_STK500__)
 148:OA_Beacon.c   ****       AMBIENT_LIGHT_DDR |= _BV(AMBIENT_LIGHT);
 149:OA_Beacon.c   ****    #endif
 150:OA_Beacon.c   **** 
 151:OA_Beacon.c   **** 	/* 
 152:OA_Beacon.c   **** 	 * Enable extrenal interrupts on the input pins
 153:OA_Beacon.c   **** 	 */
 154:OA_Beacon.c   **** 
 155:OA_Beacon.c   **** 	PCMSK |= _BV(PCINT4);
 156:OA_Beacon.c   **** 	/* Enable PIN Change interrupt */
 157:OA_Beacon.c   **** 	GIMSK |= _BV(PCIE); 
 158:OA_Beacon.c   **** 
 159:OA_Beacon.c   **** 
 160:OA_Beacon.c   **** 
 161:OA_Beacon.c   **** 
 162:OA_Beacon.c   ****   /* Start with idle sleep mode */
 163:OA_Beacon.c   ****     set_sleep_mode(SLEEP_MODE_IDLE);
 164:OA_Beacon.c   ****         
 165:OA_Beacon.c   **** 	sei();			/* enable interrupts */
 166:OA_Beacon.c   **** 
 167:OA_Beacon.c   **** 	
 168:OA_Beacon.c   **** } /* END ioinit */
 169:OA_Beacon.c   **** 
 170:OA_Beacon.c   **** 
 171:OA_Beacon.c   **** 
 172:OA_Beacon.c   **** /* Part 5: main() */
 173:OA_Beacon.c   **** 
 174:OA_Beacon.c   **** int
 175:OA_Beacon.c   **** main(void)
 176:OA_Beacon.c   **** {
 223               	.LM9:
 224               	.LFBB4:
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229               	.LBB4:
 230               	.LBB5:
  78:OA_Beacon.c   ****         /* set prescaler to 64 */
 232               	.LM10:
 233 0000 80E8      		ldi r24,lo8(-128)
 234 0002 86BD      		out 0x26,r24
  80:OA_Beacon.c   **** /* FUSE bit settings for this setup for avrdude
 236               	.LM11:
 237 0004 86E0      		ldi r24,lo8(6)
 238 0006 86BD      		out 0x26,r24
  98:OA_Beacon.c   ****         /* Set to output compare match to set pin OC0A*/
 240               	.LM12:
 241 0008 8AB5      		in r24,0x2a
 242 000a 8360      		ori r24,lo8(3)
 243 000c 8ABD      		out 0x2a,r24
 100:OA_Beacon.c   ****         /* set the timer compare value to desired FLASH ON counter cycles*/
 245               	.LM13:
 246 000e 8AB5      		in r24,0x2a
 247 0010 8068      		ori r24,lo8(-128)
 248 0012 8ABD      		out 0x2a,r24
 102:OA_Beacon.c   ****         /* Set the FLASH (OC0A) pin as output */
 250               	.LM14:
 251 0014 8BE0      		ldi r24,lo8(11)
 252 0016 89BD      		out 0x29,r24
 104:OA_Beacon.c   ****         /* Enabel timer overflow interrupt*/
 254               	.LM15:
 255 0018 B89A      		sbi 0x17,0
 106:OA_Beacon.c   ****         /* Start timing sequence by setting the prescaler */
 257               	.LM16:
 258 001a 89B7      		in r24,0x39
 259 001c 8260      		ori r24,lo8(2)
 260 001e 89BF      		out 0x39,r24
 108:OA_Beacon.c   ****  
 262               	.LM17:
 263 0020 83B7      		in r24,0x33
 264 0022 8560      		ori r24,lo8(5)
 265 0024 83BF      		out 0x33,r24
 115:OA_Beacon.c   ****         /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
 267               	.LM18:
 268 0026 3798      		cbi 0x6,7
 117:OA_Beacon.c   ****         /* Set the adc multiplexer to pin PB3 */
 270               	.LM19:
 271 0028 1E9A      		sbi 0x3,6
 119:OA_Beacon.c   ****         /* Enable the adc bandgap selector for the analog comparator */
 273               	.LM20:
 274 002a 87B1      		in r24,0x7
 275 002c 8360      		ori r24,lo8(3)
 276 002e 87B9      		out 0x7,r24
 121:OA_Beacon.c   ****         /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
 278               	.LM21:
 279 0030 469A      		sbi 0x8,6
 123:OA_Beacon.c   ****         /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
 281               	.LM22:
 282 0032 3F9A      		sbi 0x7,7
 125:OA_Beacon.c   ****         /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
 284               	.LM23:
 285 0034 88B1      		in r24,0x8
 286 0036 8C7F      		andi r24,lo8(-4)
 287 0038 88B9      		out 0x8,r24
 127:OA_Beacon.c   ****         /* enable the analog comparator */
 289               	.LM24:
 290 003a A39A      		sbi 0x14,3
 129:OA_Beacon.c   ****         /* Enable analog comparator interrupt */
 292               	.LM25:
 293 003c 4798      		cbi 0x8,7
 131:OA_Beacon.c   ****         
 295               	.LM26:
 296 003e 439A      		sbi 0x8,3
 140:OA_Beacon.c   **** 
 298               	.LM27:
 299 0040 80E1      		ldi r24,lo8(16)
 300 0042 88BB      		out 0x18,r24
 155:OA_Beacon.c   **** 	/* Enable PIN Change interrupt */
 302               	.LM28:
 303 0044 AC9A      		sbi 0x15,4
 157:OA_Beacon.c   **** 
 305               	.LM29:
 306 0046 8BB7      		in r24,0x3b
 307 0048 8062      		ori r24,lo8(32)
 308 004a 8BBF      		out 0x3b,r24
 163:OA_Beacon.c   ****         
 310               	.LM30:
 311 004c 85B7      		in r24,0x35
 312 004e 877E      		andi r24,lo8(-25)
 313 0050 85BF      		out 0x35,r24
 165:OA_Beacon.c   **** 
 315               	.LM31:
 316               	/* #APP */
 317               	 ;  165 "OA_Beacon.c" 1
 318 0052 7894      		sei
 319               	 ;  0 "" 2
 320               	/* #NOAPP */
 321               	.LBE5:
 322               	.LBE4:
 177:OA_Beacon.c   ****   /*
 178:OA_Beacon.c   ****    * Our modus of operation.
 179:OA_Beacon.c   ****    * MODE_IDLE means we watch out for a change from the analog comparator
 180:OA_Beacon.c   ****    * MODE_DEEP_SLEEP means we are waiting to start the beacon
 181:OA_Beacon.c   ****    */
 182:OA_Beacon.c   ****  enum
 183:OA_Beacon.c   ****   {
 184:OA_Beacon.c   ****     MODE_IDLE,
 185:OA_Beacon.c   ****     MODE_WAIT,
 186:OA_Beacon.c   **** 	  MODE_CHANGE,
 187:OA_Beacon.c   ****     MODE_DEEP_SLEEP
 188:OA_Beacon.c   ****   } __attribute__((packed)) mode = MODE_DEEP_SLEEP;
 189:OA_Beacon.c   ****   
 190:OA_Beacon.c   ****      
 191:OA_Beacon.c   **** 
 192:OA_Beacon.c   ****     uint8_t wait_state = INITIAL_WAIT; // holds the number of blink sequences to wait before really
 193:OA_Beacon.c   ****     
 194:OA_Beacon.c   **** 
 195:OA_Beacon.c   **** 	/* initialize the hardware */
 196:OA_Beacon.c   ****   ioinit();
 197:OA_Beacon.c   **** 
 198:OA_Beacon.c   **** /* set the intfalgs.anacomp to initialize the state of the beacon */
 199:OA_Beacon.c   **** intflags.anacomp_int = 1;
 324               	.LM32:
 325 0054 8091 0000 		lds r24,intflags
 326 0058 8460      		ori r24,lo8(1<<2)
 327 005a 8093 0000 		sts intflags,r24
 192:OA_Beacon.c   ****     
 329               	.LM33:
 330 005e 95E0      		ldi r25,lo8(5)
 188:OA_Beacon.c   ****   
 332               	.LM34:
 333 0060 83E0      		ldi r24,lo8(3)
 200:OA_Beacon.c   **** 
 201:OA_Beacon.c   ****   for (;;)
 202:OA_Beacon.c   ****     {
 203:OA_Beacon.c   **** 		
 204:OA_Beacon.c   **** 		/* For all interrupts check the system status */   
 205:OA_Beacon.c   **** 		  switch (mode)
 206:OA_Beacon.c   **** 			{
 207:OA_Beacon.c   ****         case MODE_IDLE:
 208:OA_Beacon.c   ****                     /*
 209:OA_Beacon.c   ****                     * The Beacon is in DAY or NIGHT MODE 
 210:OA_Beacon.c   ****                     * A voltage passing between the 1.1V threshold on the AMBIENT_LIGHT_ADC pin sho
 211:OA_Beacon.c   ****                     */
 212:OA_Beacon.c   **** 
 213:OA_Beacon.c   ****                   /* If we get a pinchange interrupt in mode = MODE_IDLE we ingnore it*/
 214:OA_Beacon.c   ****                    if (intflags.pinchange_int)
 215:OA_Beacon.c   ****                     {
 216:OA_Beacon.c   ****                       intflags.pinchange_int = 0;
 217:OA_Beacon.c   ****                     }
 218:OA_Beacon.c   **** 
 219:OA_Beacon.c   ****                    /* Just check the staus of the ENABLE_FLASH_PIN */
 220:OA_Beacon.c   ****                     if (bit_is_clear(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 221:OA_Beacon.c   ****                       {
 222:OA_Beacon.c   ****                         /* shut down the beacon and set in deepsleep */
 223:OA_Beacon.c   ****                         set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 224:OA_Beacon.c   ****                         mode = MODE_DEEP_SLEEP;
 225:OA_Beacon.c   **** 
 226:OA_Beacon.c   ****                         /* do some cleanup*/
 227:OA_Beacon.c   ****                          /* disable the pwm and timer0 */
 228:OA_Beacon.c   ****                             /* disable the timer0 interrupt */
 229:OA_Beacon.c   ****                             TIMSK &= ~_BV(TOIE0);
 230:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 231:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_0;
 232:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 233:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 234:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 235:OA_Beacon.c   ****                             TCNT0 = 0;
 236:OA_Beacon.c   ****                             /* power down the timer0 */
 237:OA_Beacon.c   ****                             PRR |= _BV(PRTIM0);
 238:OA_Beacon.c   **** 
 239:OA_Beacon.c   ****                             /* disable the analog comparator interrupt*/
 240:OA_Beacon.c   ****                             ACSR &= ~_BV(ACIE);
 241:OA_Beacon.c   ****                             
 242:OA_Beacon.c   ****                            /* enable FLASH as output after disconnection from timer */
 243:OA_Beacon.c   ****                             FLASH_DDR |= _BV(FLASH);
 244:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 245:OA_Beacon.c   ****                             FLASHPORT &= ~_BV(FLASH);
 246:OA_Beacon.c   **** 
 247:OA_Beacon.c   ****                         break;
 248:OA_Beacon.c   ****                       }
 249:OA_Beacon.c   ****                         
 250:OA_Beacon.c   ****                         
 251:OA_Beacon.c   ****                       
 252:OA_Beacon.c   ****                       
 253:OA_Beacon.c   ****                     /* analog comparator interrupt flag set on toggle state*/
 254:OA_Beacon.c   ****                       if (intflags.anacomp_int)
 255:OA_Beacon.c   ****                       {
 256:OA_Beacon.c   ****                         /* an analog comparator interrupt has occured */
 257:OA_Beacon.c   ****                         /* reset the analog comparator interrupt flag */
 258:OA_Beacon.c   ****                         intflags.anacomp_int = 0;
 259:OA_Beacon.c   ****                         /* disable the analog comparator interrupt*/
 260:OA_Beacon.c   ****                         ACSR &= ~_BV(ACIE);
 261:OA_Beacon.c   **** 
 262:OA_Beacon.c   ****                         /* start the timer here to enable the wait state */
 263:OA_Beacon.c   ****                         /* power up the timer0 */
 264:OA_Beacon.c   ****                         PRR &= ~_BV(PRTIM0);
 265:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 266:OA_Beacon.c   ****                         TIMSK |= _BV(TOIE0);
 267:OA_Beacon.c   **** 
 268:OA_Beacon.c   ****                         /* check the status of the analog comparator and setup the current mode */
 269:OA_Beacon.c   ****                         if bit_is_set(ACSR, ACO){
 270:OA_Beacon.c   ****                             /* The analog comparator is positive (NIGHT) */
 271:OA_Beacon.c   **** 
 272:OA_Beacon.c   **** #if defined (__TestSetup_STK500__)                    
 273:OA_Beacon.c   ****   AMBIENT_LIGHT_PORT |= _BV(AMBIENT_LIGHT); // reflect this on the AMBIENT LIGHT PIN
 274:OA_Beacon.c   **** #endif
 275:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH */
 276:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 277:OA_Beacon.c   **** 
 278:OA_Beacon.c   ****                               /* enable the FLASH pin as output */
 279:OA_Beacon.c   ****                               FLASH_DDR |= _BV(FLASH);
 280:OA_Beacon.c   ****                               FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 281:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 282:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_V;                
 283:OA_Beacon.c   ****                         } 
 284:OA_Beacon.c   ****                             
 285:OA_Beacon.c   **** #if defined (__TestSetup_STK500__)
 286:OA_Beacon.c   ****                         else
 287:OA_Beacon.c   ****                             {
 288:OA_Beacon.c   ****                             /* The analog comparator is negative (DAY) */                    
 289:OA_Beacon.c   ****        AMBIENT_LIGHT_PORT &= ~_BV(AMBIENT_LIGHT);// reflect this on the AMBIENT LIGHT PIN
 290:OA_Beacon.c   ****                             } /* END else */
 291:OA_Beacon.c   **** #endif
 292:OA_Beacon.c   ****                             
 293:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 294:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_V;
 295:OA_Beacon.c   ****                         /* Change mode */
 296:OA_Beacon.c   ****                         mode = MODE_WAIT;
 297:OA_Beacon.c   **** 
 298:OA_Beacon.c   ****                       }       
 299:OA_Beacon.c   **** 				 break;
 300:OA_Beacon.c   **** 			
 301:OA_Beacon.c   ****       case MODE_WAIT:
 302:OA_Beacon.c   ****                 /* in this mode we wait some seconds before entering the new night or day mode */
 303:OA_Beacon.c   ****                 if (intflags.tmr0_int)
 304:OA_Beacon.c   ****                 {
 305:OA_Beacon.c   ****                   intflags.tmr0_int = 0;
 306:OA_Beacon.c   ****                   if (--wait_state == 0)
 307:OA_Beacon.c   ****                   { 
 308:OA_Beacon.c   ****                     wait_state = INITIAL_WAIT;
 309:OA_Beacon.c   ****                     mode = MODE_CHANGE; 
 310:OA_Beacon.c   ****                   }
 311:OA_Beacon.c   ****                 }
 312:OA_Beacon.c   ****                 
 313:OA_Beacon.c   ****           break;
 314:OA_Beacon.c   **** 			case MODE_CHANGE:
 315:OA_Beacon.c   ****                         /* check state of comparator after the wait to set the right mode */
 316:OA_Beacon.c   ****                         /* the state is detected even if the interrupt is disabled */
 317:OA_Beacon.c   ****                        if bit_is_set(ACSR, ACO){
 318:OA_Beacon.c   ****                             // FROM_DAY;
 319:OA_Beacon.c   ****                             /* last_mode == FROM_DAY */
 320:OA_Beacon.c   ****                             /* Enable the OCOA pin as output, start blinking */
 321:OA_Beacon.c   ****                             TCCR0A |= _BV(COM0A1);
 322:OA_Beacon.c   ****                         }
 323:OA_Beacon.c   ****                        else {
 324:OA_Beacon.c   ****                             // FROM_NIGHT;
 325:OA_Beacon.c   ****                             /* disable the pwm and timer0 */
 326:OA_Beacon.c   ****                             /* disable the timer0 interrupt */
 327:OA_Beacon.c   ****                             TIMSK &= ~_BV(TOIE0);
 328:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 329:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_0;
 335               	.LM35:
 336 0062 48EF      		ldi r20,lo8(-8)
 330:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 331:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 332:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 333:OA_Beacon.c   ****                             TCNT0 = 0;
 334:OA_Beacon.c   ****                             /* power down the timer0 */
 335:OA_Beacon.c   ****                             PRR |= _BV(PRTIM0);
 336:OA_Beacon.c   ****                             
 337:OA_Beacon.c   ****                            /* enable FLASH as output after disconnection from timer */
 338:OA_Beacon.c   ****                             FLASH_DDR |= _BV(FLASH);
 339:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 340:OA_Beacon.c   ****                             FLASHPORT &= ~_BV(FLASH);
 341:OA_Beacon.c   ****                             }
 342:OA_Beacon.c   ****                          
 343:OA_Beacon.c   ****                         
 344:OA_Beacon.c   ****                         /* change mode */
 345:OA_Beacon.c   ****                         mode = MODE_IDLE;
 346:OA_Beacon.c   ****                         /* Enable analog comparator interrupt */
 347:OA_Beacon.c   ****                         ACSR |= _BV(ACIE);                          
 348:OA_Beacon.c   ****        
 349:OA_Beacon.c   **** 					break;
 350:OA_Beacon.c   ****       case MODE_DEEP_SLEEP:
 351:OA_Beacon.c   ****                   /* check the status of the ENABLE_FLASH_PIN. Turn ON the Beacon? */
 352:OA_Beacon.c   ****                   if (intflags.pinchange_int)
 353:OA_Beacon.c   ****                   {
 354:OA_Beacon.c   ****                     intflags.pinchange_int = 0;
 355:OA_Beacon.c   ****                     if (bit_is_set(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 356:OA_Beacon.c   ****                     {
 357:OA_Beacon.c   ****                       /* set the intfalgs.anacomp to initialize the state of the beacon */
 358:OA_Beacon.c   ****                       intflags.anacomp_int = 1;
 359:OA_Beacon.c   ****                       mode = MODE_IDLE;
 360:OA_Beacon.c   ****                       set_sleep_mode(SLEEP_MODE_IDLE);
 361:OA_Beacon.c   **** 
 362:OA_Beacon.c   ****                       /* start the timer to generate an interrupt to change mode*/
 363:OA_Beacon.c   ****                        /* power up the timer0 */
 364:OA_Beacon.c   ****                         PRR &= ~_BV(PRTIM0);
 365:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 366:OA_Beacon.c   ****                         TIMSK |= _BV(TOIE0);
 367:OA_Beacon.c   ****                         /* disconnect compare match from the output pin FLASH */
 368:OA_Beacon.c   ****                         TCCR0A &= ~_BV(COM0A1);
 369:OA_Beacon.c   ****                         /* reset the timer0 counter register */
 370:OA_Beacon.c   ****                         TCNT0 = 0;
 371:OA_Beacon.c   ****                         /* start timing sequence by setting the prescaler */
 372:OA_Beacon.c   ****                         TCCR0B = TMR0_PRESC_V;
 338               	.LM36:
 339 0064 35E0      		ldi r19,lo8(5)
 340               	.L15:
 205:OA_Beacon.c   **** 			{
 342               	.LM37:
 343 0066 8230      		cpi r24,lo8(2)
 344 0068 01F4      		brne .+2
 345 006a 00C0      		rjmp .L6
 346 006c 8330      		cpi r24,lo8(3)
 347 006e 01F4      		brne .+2
 348 0070 00C0      		rjmp .L7
 349 0072 8130      		cpi r24,lo8(1)
 350 0074 01F4      		brne .+2
 351 0076 00C0      		rjmp .L8
 214:OA_Beacon.c   ****                     {
 353               	.LM38:
 354 0078 8091 0000 		lds r24,intflags
 355 007c 83FF      		sbrs r24,3
 356 007e 00C0      		rjmp .L9
 216:OA_Beacon.c   ****                     }
 358               	.LM39:
 359 0080 8091 0000 		lds r24,intflags
 360 0084 877F      		andi r24,lo8(~(1<<3))
 361 0086 8093 0000 		sts intflags,r24
 362               	.L9:
 220:OA_Beacon.c   ****                       {
 364               	.LM40:
 365 008a B499      		sbic 0x16,4
 366 008c 00C0      		rjmp .L10
 223:OA_Beacon.c   ****                         mode = MODE_DEEP_SLEEP;
 368               	.LM41:
 369 008e 85B7      		in r24,0x35
 370 0090 877E      		andi r24,lo8(-25)
 371 0092 8061      		ori r24,lo8(16)
 372 0094 85BF      		out 0x35,r24
 229:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 374               	.LM42:
 375 0096 89B7      		in r24,0x39
 376 0098 8D7F      		andi r24,lo8(-3)
 377 009a 89BF      		out 0x39,r24
 231:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 379               	.LM43:
 380 009c 43BF      		out 0x33,r20
 233:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 382               	.LM44:
 383 009e 8AB5      		in r24,0x2a
 384 00a0 8F77      		andi r24,lo8(127)
 385 00a2 8ABD      		out 0x2a,r24
 235:OA_Beacon.c   ****                             /* power down the timer0 */
 387               	.LM45:
 388 00a4 12BE      		out 0x32,__zero_reg__
 237:OA_Beacon.c   **** 
 390               	.LM46:
 391 00a6 80B5      		in r24,0x20
 392 00a8 8460      		ori r24,lo8(4)
 393 00aa 80BD      		out 0x20,r24
 240:OA_Beacon.c   ****                             
 395               	.LM47:
 396 00ac 4398      		cbi 0x8,3
 243:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 398               	.LM48:
 399 00ae B89A      		sbi 0x17,0
 245:OA_Beacon.c   **** 
 401               	.LM49:
 402 00b0 C098      		cbi 0x18,0
 224:OA_Beacon.c   **** 
 404               	.LM50:
 405 00b2 83E0      		ldi r24,lo8(3)
 406               	.L11:
 373:OA_Beacon.c   ****                       
 374:OA_Beacon.c   ****                       /* Enable analog comparator interrupt */
 375:OA_Beacon.c   ****                         ACSR |= _BV(ACIE);     
 376:OA_Beacon.c   **** 
 377:OA_Beacon.c   ****                     }
 378:OA_Beacon.c   ****                   }
 379:OA_Beacon.c   ****             break;
 380:OA_Beacon.c   ****                   
 381:OA_Beacon.c   ****                   
 382:OA_Beacon.c   **** 			}
 383:OA_Beacon.c   **** 			/*end case */
 384:OA_Beacon.c   ****         
 385:OA_Beacon.c   ****         /* The analog comparator is only enabled in the idle sleep mode (SLEEP_MODE_IDLE) */
 386:OA_Beacon.c   ****         /* Put the MCU in sleep and wait for next interrupt */
 387:OA_Beacon.c   ****         sleep_mode();
 408               	.LM51:
 409 00b4 25B7      		in r18,0x35
 410 00b6 2062      		ori r18,lo8(32)
 411 00b8 25BF      		out 0x35,r18
 412               	/* #APP */
 413               	 ;  387 "OA_Beacon.c" 1
 414 00ba 8895      		sleep
 415               		
 416               	 ;  0 "" 2
 417               	/* #NOAPP */
 418 00bc 25B7      		in r18,0x35
 419 00be 2F7D      		andi r18,lo8(-33)
 420 00c0 25BF      		out 0x35,r18
 205:OA_Beacon.c   **** 			{
 422               	.LM52:
 423 00c2 00C0      		rjmp .L15
 424               	.L10:
 254:OA_Beacon.c   ****                       {
 426               	.LM53:
 427 00c4 8091 0000 		lds r24,intflags
 428 00c8 82FF      		sbrs r24,2
 429 00ca 00C0      		rjmp .L16
 258:OA_Beacon.c   ****                         /* disable the analog comparator interrupt*/
 431               	.LM54:
 432 00cc 8091 0000 		lds r24,intflags
 433 00d0 8B7F      		andi r24,lo8(~(1<<2))
 434 00d2 8093 0000 		sts intflags,r24
 260:OA_Beacon.c   **** 
 436               	.LM55:
 437 00d6 4398      		cbi 0x8,3
 264:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 439               	.LM56:
 440 00d8 80B5      		in r24,0x20
 441 00da 8B7F      		andi r24,lo8(-5)
 442 00dc 80BD      		out 0x20,r24
 266:OA_Beacon.c   **** 
 444               	.LM57:
 445 00de 89B7      		in r24,0x39
 446 00e0 8260      		ori r24,lo8(2)
 447 00e2 89BF      		out 0x39,r24
 269:OA_Beacon.c   ****                             /* The analog comparator is positive (NIGHT) */
 449               	.LM58:
 450 00e4 459B      		sbis 0x8,5
 451 00e6 00C0      		rjmp .L12
 276:OA_Beacon.c   **** 
 453               	.LM59:
 454 00e8 8AB5      		in r24,0x2a
 455 00ea 8F77      		andi r24,lo8(127)
 456 00ec 8ABD      		out 0x2a,r24
 279:OA_Beacon.c   ****                               FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 458               	.LM60:
 459 00ee B89A      		sbi 0x17,0
 280:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 461               	.LM61:
 462 00f0 C098      		cbi 0x18,0
 282:OA_Beacon.c   ****                         } 
 464               	.LM62:
 465 00f2 33BF      		out 0x33,r19
 466               	.L12:
 294:OA_Beacon.c   ****                         /* Change mode */
 468               	.LM63:
 469 00f4 33BF      		out 0x33,r19
 296:OA_Beacon.c   **** 
 471               	.LM64:
 472 00f6 81E0      		ldi r24,lo8(1)
 473 00f8 00C0      		rjmp .L11
 474               	.L8:
 303:OA_Beacon.c   ****                 {
 476               	.LM65:
 477 00fa 2091 0000 		lds r18,intflags
 478 00fe 20FF      		sbrs r18,0
 479 0100 00C0      		rjmp .L11
 305:OA_Beacon.c   ****                   if (--wait_state == 0)
 481               	.LM66:
 482 0102 2091 0000 		lds r18,intflags
 483 0106 2E7F      		andi r18,lo8(~(1<<0))
 484 0108 2093 0000 		sts intflags,r18
 306:OA_Beacon.c   ****                   { 
 486               	.LM67:
 487 010c 9150      		subi r25,lo8(-(-1))
 488 010e 01F4      		brne .L11
 308:OA_Beacon.c   ****                     mode = MODE_CHANGE; 
 490               	.LM68:
 491 0110 95E0      		ldi r25,lo8(5)
 309:OA_Beacon.c   ****                   }
 493               	.LM69:
 494 0112 82E0      		ldi r24,lo8(2)
 495 0114 00C0      		rjmp .L11
 496               	.L6:
 317:OA_Beacon.c   ****                             // FROM_DAY;
 498               	.LM70:
 499 0116 459B      		sbis 0x8,5
 500 0118 00C0      		rjmp .L13
 321:OA_Beacon.c   ****                         }
 502               	.LM71:
 503 011a 8AB5      		in r24,0x2a
 504 011c 8068      		ori r24,lo8(-128)
 505 011e 8ABD      		out 0x2a,r24
 506               	.L32:
 375:OA_Beacon.c   **** 
 508               	.LM72:
 509 0120 439A      		sbi 0x8,3
 510               	.L16:
 511 0122 80E0      		ldi r24,0
 512 0124 00C0      		rjmp .L11
 513               	.L13:
 327:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 515               	.LM73:
 516 0126 89B7      		in r24,0x39
 517 0128 8D7F      		andi r24,lo8(-3)
 518 012a 89BF      		out 0x39,r24
 329:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 520               	.LM74:
 521 012c 43BF      		out 0x33,r20
 331:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 523               	.LM75:
 524 012e 8AB5      		in r24,0x2a
 525 0130 8F77      		andi r24,lo8(127)
 526 0132 8ABD      		out 0x2a,r24
 333:OA_Beacon.c   ****                             /* power down the timer0 */
 528               	.LM76:
 529 0134 12BE      		out 0x32,__zero_reg__
 335:OA_Beacon.c   ****                             
 531               	.LM77:
 532 0136 80B5      		in r24,0x20
 533 0138 8460      		ori r24,lo8(4)
 534 013a 80BD      		out 0x20,r24
 338:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 536               	.LM78:
 537 013c B89A      		sbi 0x17,0
 340:OA_Beacon.c   ****                             }
 539               	.LM79:
 540 013e C098      		cbi 0x18,0
 541 0140 00C0      		rjmp .L32
 542               	.L7:
 352:OA_Beacon.c   ****                   {
 544               	.LM80:
 545 0142 2091 0000 		lds r18,intflags
 546 0146 23FF      		sbrs r18,3
 547 0148 00C0      		rjmp .L11
 354:OA_Beacon.c   ****                     if (bit_is_set(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 549               	.LM81:
 550 014a 2091 0000 		lds r18,intflags
 551 014e 277F      		andi r18,lo8(~(1<<3))
 552 0150 2093 0000 		sts intflags,r18
 355:OA_Beacon.c   ****                     {
 554               	.LM82:
 555 0154 B49B      		sbis 0x16,4
 556 0156 00C0      		rjmp .L11
 358:OA_Beacon.c   ****                       mode = MODE_IDLE;
 558               	.LM83:
 559 0158 8091 0000 		lds r24,intflags
 560 015c 8460      		ori r24,lo8(1<<2)
 561 015e 8093 0000 		sts intflags,r24
 360:OA_Beacon.c   **** 
 563               	.LM84:
 564 0162 85B7      		in r24,0x35
 565 0164 877E      		andi r24,lo8(-25)
 566 0166 85BF      		out 0x35,r24
 364:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 568               	.LM85:
 569 0168 80B5      		in r24,0x20
 570 016a 8B7F      		andi r24,lo8(-5)
 571 016c 80BD      		out 0x20,r24
 366:OA_Beacon.c   ****                         /* disconnect compare match from the output pin FLASH */
 573               	.LM86:
 574 016e 89B7      		in r24,0x39
 575 0170 8260      		ori r24,lo8(2)
 576 0172 89BF      		out 0x39,r24
 368:OA_Beacon.c   ****                         /* reset the timer0 counter register */
 578               	.LM87:
 579 0174 8AB5      		in r24,0x2a
 580 0176 8F77      		andi r24,lo8(127)
 581 0178 8ABD      		out 0x2a,r24
 370:OA_Beacon.c   ****                         /* start timing sequence by setting the prescaler */
 583               	.LM88:
 584 017a 12BE      		out 0x32,__zero_reg__
 372:OA_Beacon.c   ****                       
 586               	.LM89:
 587 017c 33BF      		out 0x33,r19
 588 017e 00C0      		rjmp .L32
 594               	.Lscope4:
 595               		.comm	intflags,1,1
 597               		.text
 599               	.Letext0:
 600               		.ident	"GCC: (GNU) 7.3.0"
 601               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 OA_Beacon.c
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:117    .text:0000000000000000 __vector_5
                            *COM*:0000000000000001 intflags
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:150    .text:0000000000000022 __vector_7
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:183    .text:0000000000000044 __vector_2
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//ccfGx3Hc.s:221    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_clear_bss

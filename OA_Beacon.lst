   1               		.file	"OA_Beacon.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 115               	.global	__vector_5
 117               	__vector_5:
   1:OA_Beacon.c   **** //
   2:OA_Beacon.c   **** //  Beacon.c
   3:OA_Beacon.c   **** //
   4:OA_Beacon.c   **** //  Created by Atle Kleven on 31-07-2024.
   5:OA_Beacon.c   **** //  Copyright Atle Kleven 031-07-2024. All rights reserved.
   6:OA_Beacon.c   **** //
   7:OA_Beacon.c   **** 
   8:OA_Beacon.c   **** 
   9:OA_Beacon.c   **** 
  10:OA_Beacon.c   **** #include <stdint.h>
  11:OA_Beacon.c   **** #include <stdlib.h>
  12:OA_Beacon.c   **** #include <inttypes.h>
  13:OA_Beacon.c   **** #include <avr/interrupt.h>
  14:OA_Beacon.c   **** #include <avr/io.h>
  15:OA_Beacon.c   **** #include <avr/sleep.h>
  16:OA_Beacon.c   **** #include <util/delay.h>
  17:OA_Beacon.c   **** 
  18:OA_Beacon.c   **** #include "OA_Beacon.h"
  19:OA_Beacon.c   **** 
  20:OA_Beacon.c   **** 
  21:OA_Beacon.c   **** 
  22:OA_Beacon.c   **** /* Part 1: Macro definitions */
  23:OA_Beacon.c   **** 
  24:OA_Beacon.c   **** 	/* See also headder file */
  25:OA_Beacon.c   **** 
  26:OA_Beacon.c   **** /* Part 2: Variable definitions */
  27:OA_Beacon.c   **** 
  28:OA_Beacon.c   **** 
  29:OA_Beacon.c   **** /*
  30:OA_Beacon.c   ****  * Bits that are set inside interrupt routines, and watched outside in
  31:OA_Beacon.c   ****  * the program's main loop.
  32:OA_Beacon.c   ****  */
  33:OA_Beacon.c   **** volatile struct
  34:OA_Beacon.c   **** {
  35:OA_Beacon.c   ****   uint8_t tmr0_int: 1;
  36:OA_Beacon.c   ****   uint8_t tmr1_int: 1;
  37:OA_Beacon.c   ****   uint8_t anacomp_int: 1;
  38:OA_Beacon.c   ****   int8_t pinchange_int: 1;
  39:OA_Beacon.c   **** }
  40:OA_Beacon.c   **** intflags;
  41:OA_Beacon.c   **** 
  42:OA_Beacon.c   **** 
  43:OA_Beacon.c   **** 
  44:OA_Beacon.c   **** 
  45:OA_Beacon.c   **** /* Part 3: Interrupt service routines */
  46:OA_Beacon.c   **** 	
  47:OA_Beacon.c   **** 	
  48:OA_Beacon.c   **** ISR(TIM0_OVF_vect){
 119               	.LM0:
 120               	.LFBB1:
 121 0000 8F93 8FB7 		__gcc_isr 1
 121      8F93 
 122               	/* prologue: Signal */
 123               	/* frame size = 0 */
 124               	/* stack size = 0...4 */
 125               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  49:OA_Beacon.c   **** 	intflags.tmr0_int = 1;		/* Mark the occurence of timer0 overflow interrupt */
 127               	.LM1:
 128 0006 8091 0000 		lds r24,intflags
 129 000a 8160      		ori r24,lo8(1<<0)
 130 000c 8093 0000 		sts intflags,r24
 131               	/* epilogue start */
  50:OA_Beacon.c   **** 	}
 133               	.LM2:
 134 0010 8F91 8FBF 		__gcc_isr 2
 134      8F91 
 135 0016 1895      		reti
 136               		__gcc_isr 0,r24
 138               	.Lscope1:
 140               	.global	__vector_7
 142               	__vector_7:
  51:OA_Beacon.c   **** 
  52:OA_Beacon.c   **** ISR(ANA_COMP_vect){
 144               	.LM3:
 145               	.LFBB2:
 146 0018 8F93 8FB7 		__gcc_isr 1
 146      8F93 
 147               	/* prologue: Signal */
 148               	/* frame size = 0 */
 149               	/* stack size = 0...4 */
 150               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  53:OA_Beacon.c   ****     intflags.anacomp_int = 1; /* Mark the occurence of an analog comparator interrupt*/
 152               	.LM4:
 153 001e 8091 0000 		lds r24,intflags
 154 0022 8460      		ori r24,lo8(1<<2)
 155 0024 8093 0000 		sts intflags,r24
 156               	/* epilogue start */
  54:OA_Beacon.c   **** }
 158               	.LM5:
 159 0028 8F91 8FBF 		__gcc_isr 2
 159      8F91 
 160 002e 1895      		reti
 161               		__gcc_isr 0,r24
 163               	.Lscope2:
 165               	.global	__vector_2
 167               	__vector_2:
  55:OA_Beacon.c   **** 
  56:OA_Beacon.c   **** ISR(PCINT0_vect){
 169               	.LM6:
 170               	.LFBB3:
 171 0030 8F93 8FB7 		__gcc_isr 1
 171      8F93 
 172 0036 9F93      		push r25
 173               	/* prologue: Signal */
 174               	/* frame size = 0 */
 175               	/* stack size = 1...5 */
 176               	.L__stack_usage = 1 + __gcc_isr.n_pushed
  57:OA_Beacon.c   ****     intflags.pinchange_int = 1; /* Mark the occurence of a pin change interrupt*/
 178               	.LM7:
 179 0038 8091 0000 		lds r24,intflags
 180 003c 9FEF      		ldi r25,lo8(-1)
 181 003e 90FB      		bst r25,0
 182 0040 83F9      		bld r24,3
 183 0042 8093 0000 		sts intflags,r24
 184               	/* epilogue start */
  58:OA_Beacon.c   **** }
 186               	.LM8:
 187 0046 9F91      		pop r25
 188 0048 8F91 8FBF 		__gcc_isr 2
 188      8F91 
 189 004e 1895      		reti
 190               		__gcc_isr 0,r24
 192               	.Lscope3:
 193               		.section	.text.startup,"ax",@progbits
 195               	.global	main
 197               	main:
  59:OA_Beacon.c   **** 
  60:OA_Beacon.c   **** /* Part 4: Auxiliary functions */
  61:OA_Beacon.c   **** /* function to start the tomert0 conbnting to TOP and generatinmg an interrupt */
  62:OA_Beacon.c   **** // static void
  63:OA_Beacon.c   **** //   start_timer_to_TOP(void)
  64:OA_Beacon.c   **** //   {
  65:OA_Beacon.c   **** 
  66:OA_Beacon.c   **** //   }
  67:OA_Beacon.c   **** 
  68:OA_Beacon.c   **** 
  69:OA_Beacon.c   **** /*
  70:OA_Beacon.c   ****  * Do all the startup-time peripheral initializations.
  71:OA_Beacon.c   ****  */
  72:OA_Beacon.c   **** static void
  73:OA_Beacon.c   **** 	ioinit(void)
  74:OA_Beacon.c   **** {
  75:OA_Beacon.c   ****         /* if useing a 8 MHz clock with 8 prescaler (1000000MHz) */
  76:OA_Beacon.c   ****         /* Set MCU master clock prescaler to 64 for a CPU_FREQUENCY of 8MHz/64=125000Hz */
  77:OA_Beacon.c   ****         /* signal a clockchage */
  78:OA_Beacon.c   ****         CLKPR = _BV(7);
  79:OA_Beacon.c   ****         /* set prescaler to 64 */
  80:OA_Beacon.c   ****         CLKPR = _BV(CLKPS2) | _BV(CLKPS1);
  81:OA_Beacon.c   **** /* FUSE bit settings for this setup for avrdude
  82:OA_Beacon.c   ****  * -U lfuse:w:0x62:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
  83:OA_Beacon.c   ****  */
  84:OA_Beacon.c   ****         
  85:OA_Beacon.c   ****  /*
  86:OA_Beacon.c   ****    * Set up the 8-bit timer 0.
  87:OA_Beacon.c   ****    *
  88:OA_Beacon.c   ****    * Timer 0 will be set up prescaled with system clock / 1024
  89:OA_Beacon.c   ****    * producing a timer wrap around period of apporx 2 seconds
  90:OA_Beacon.c   ****    * up-counting until overflow where an overflow intererupt will be asserted (TOEI0 in TIMSK)
  91:OA_Beacon.c   ****    * The timer is set in fast pwm mode (WGM1 and WGM0 in TCCR0A)
  92:OA_Beacon.c   ****    * NO: Output compare interrupt at value of OCR0A (OCIE0A in TIMSK)
  93:OA_Beacon.c   ****    * Toggle pin OC0A (PB0) at counter compare match with OCR0A
  94:OA_Beacon.c   ****    * The timer0 will be started by setting the prescaler (CS02..0 in TCCR0B)
  95:OA_Beacon.c   ****    */
  96:OA_Beacon.c   ****    
  97:OA_Beacon.c   ****         /* set the timer to fast PWM mode */
  98:OA_Beacon.c   ****         TCCR0A |= _BV(WGM01) | _BV(WGM00);
  99:OA_Beacon.c   ****         /* Set to output compare match to set pin OC0A*/
 100:OA_Beacon.c   ****         TCCR0A |= _BV(COM0A1);
 101:OA_Beacon.c   ****         /* set the timer compare value to desired FLASH ON counter cycles*/
 102:OA_Beacon.c   ****         OCR0A = TMR0_PWM_TRESH;
 103:OA_Beacon.c   ****         /* Set the FLASH (OC0A) pin as output */
 104:OA_Beacon.c   ****         FLASH_DDR |= _BV(FLASH);
 105:OA_Beacon.c   ****         /* Enabel timer overflow interrupt*/
 106:OA_Beacon.c   ****         TIMSK |= _BV(TOIE0);
 107:OA_Beacon.c   ****         /* Start timing sequence by setting the prescaler */
 108:OA_Beacon.c   ****         TCCR0B |= TMR0_PRESC_V;
 109:OA_Beacon.c   ****  
 110:OA_Beacon.c   ****  /*
 111:OA_Beacon.c   ****   * Setup the analog comparator
 112:OA_Beacon.c   ****   * Reference voltage 1,1V from bandgap voltage
 113:OA_Beacon.c   ****   */
 114:OA_Beacon.c   ****         /* Make sure the ADC is turned off */
 115:OA_Beacon.c   ****         ADCSRA &= ~_BV(ADEN);
 116:OA_Beacon.c   ****         /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
 117:OA_Beacon.c   ****         ADCSRB |= _BV(ACME);
 118:OA_Beacon.c   ****         /* Set the adc multiplexer to pin PB3 */
 119:OA_Beacon.c   ****         ADMUX |= _BV(MUX1) | _BV(MUX0);
 120:OA_Beacon.c   ****         /* Enable the adc bandgap selector for the analog comparator */
 121:OA_Beacon.c   ****         ACSR |= _BV(ACBG);
 122:OA_Beacon.c   ****         /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
 123:OA_Beacon.c   ****         ADMUX |= _BV(REFS1);
 124:OA_Beacon.c   ****         /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
 125:OA_Beacon.c   ****         ACSR &= ~_BV(ACIS1) & ~_BV(ACIS0);
 126:OA_Beacon.c   ****         /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
 127:OA_Beacon.c   ****         DIDR0 |= _BV(ADC3D);
 128:OA_Beacon.c   ****         /* enable the analog comparator */
 129:OA_Beacon.c   ****         ACSR &= ~_BV(ACD);
 130:OA_Beacon.c   ****         /* Enable analog comparator interrupt */
 131:OA_Beacon.c   ****         ACSR |= _BV(ACIE);
 132:OA_Beacon.c   ****         
 133:OA_Beacon.c   ****         
 134:OA_Beacon.c   ****   
 135:OA_Beacon.c   ****   /* Enable pull-ups for binary inputs *
 136:OA_Beacon.c   ****    * Setting the PORTxn bits for pins configured as inputs,
 137:OA_Beacon.c   ****    * DDRxn = 0, enables pullup resistors.
 138:OA_Beacon.c   ****    */
 139:OA_Beacon.c   ****         
 140:OA_Beacon.c   ****         PORTB = _BV(ENABlE_FLASH_PIN);
 141:OA_Beacon.c   **** 
 142:OA_Beacon.c   ****   /*
 143:OA_Beacon.c   ****    * Enable Port outputs:
 144:OA_Beacon.c   ****    * setting the PORTxn bit enables the pin as output
 145:OA_Beacon.c   ****    */
 146:OA_Beacon.c   ****   
 147:OA_Beacon.c   ****    #if defined (__TestSetup_STK500__)
 148:OA_Beacon.c   ****       AMBIENT_LIGHT_DDR |= _BV(AMBIENT_LIGHT);
 149:OA_Beacon.c   ****    #endif
 150:OA_Beacon.c   **** 
 151:OA_Beacon.c   **** 	/* 
 152:OA_Beacon.c   **** 	 * Enable external interrupts on the input pins
 153:OA_Beacon.c   **** 	 */
 154:OA_Beacon.c   **** 
 155:OA_Beacon.c   **** 	PCMSK |= _BV(PCINT4);
 156:OA_Beacon.c   **** 	/* Enable PIN Change interrupt */
 157:OA_Beacon.c   **** 	GIMSK |= _BV(PCIE); 
 158:OA_Beacon.c   **** 
 159:OA_Beacon.c   **** 
 160:OA_Beacon.c   **** 
 161:OA_Beacon.c   **** 
 162:OA_Beacon.c   ****   /* Start with idle sleep mode */
 163:OA_Beacon.c   ****     set_sleep_mode(SLEEP_MODE_IDLE);
 164:OA_Beacon.c   ****         
 165:OA_Beacon.c   **** 	sei();			/* enable interrupts */
 166:OA_Beacon.c   **** 
 167:OA_Beacon.c   **** 	
 168:OA_Beacon.c   **** } /* END ioinit */
 169:OA_Beacon.c   **** 
 170:OA_Beacon.c   **** 
 171:OA_Beacon.c   **** 
 172:OA_Beacon.c   **** /* Part 5: main() */
 173:OA_Beacon.c   **** 
 174:OA_Beacon.c   **** int
 175:OA_Beacon.c   **** main(void)
 176:OA_Beacon.c   **** {
 199               	.LM9:
 200               	.LFBB4:
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 205               	.LBB4:
 206               	.LBB5:
  78:OA_Beacon.c   ****         /* set prescaler to 64 */
 208               	.LM10:
 209 0000 80E8      		ldi r24,lo8(-128)
 210 0002 86BD      		out 0x26,r24
  80:OA_Beacon.c   **** /* FUSE bit settings for this setup for avrdude
 212               	.LM11:
 213 0004 86E0      		ldi r24,lo8(6)
 214 0006 86BD      		out 0x26,r24
  98:OA_Beacon.c   ****         /* Set to output compare match to set pin OC0A*/
 216               	.LM12:
 217 0008 8AB5      		in r24,0x2a
 218 000a 8360      		ori r24,lo8(3)
 219 000c 8ABD      		out 0x2a,r24
 100:OA_Beacon.c   ****         /* set the timer compare value to desired FLASH ON counter cycles*/
 221               	.LM13:
 222 000e 8AB5      		in r24,0x2a
 223 0010 8068      		ori r24,lo8(-128)
 224 0012 8ABD      		out 0x2a,r24
 102:OA_Beacon.c   ****         /* Set the FLASH (OC0A) pin as output */
 226               	.LM14:
 227 0014 8BE0      		ldi r24,lo8(11)
 228 0016 89BD      		out 0x29,r24
 104:OA_Beacon.c   ****         /* Enabel timer overflow interrupt*/
 230               	.LM15:
 231 0018 B89A      		sbi 0x17,0
 106:OA_Beacon.c   ****         /* Start timing sequence by setting the prescaler */
 233               	.LM16:
 234 001a 89B7      		in r24,0x39
 235 001c 8260      		ori r24,lo8(2)
 236 001e 89BF      		out 0x39,r24
 108:OA_Beacon.c   ****  
 238               	.LM17:
 239 0020 83B7      		in r24,0x33
 240 0022 8560      		ori r24,lo8(5)
 241 0024 83BF      		out 0x33,r24
 115:OA_Beacon.c   ****         /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
 243               	.LM18:
 244 0026 3798      		cbi 0x6,7
 117:OA_Beacon.c   ****         /* Set the adc multiplexer to pin PB3 */
 246               	.LM19:
 247 0028 1E9A      		sbi 0x3,6
 119:OA_Beacon.c   ****         /* Enable the adc bandgap selector for the analog comparator */
 249               	.LM20:
 250 002a 87B1      		in r24,0x7
 251 002c 8360      		ori r24,lo8(3)
 252 002e 87B9      		out 0x7,r24
 121:OA_Beacon.c   ****         /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
 254               	.LM21:
 255 0030 469A      		sbi 0x8,6
 123:OA_Beacon.c   ****         /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
 257               	.LM22:
 258 0032 3F9A      		sbi 0x7,7
 125:OA_Beacon.c   ****         /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
 260               	.LM23:
 261 0034 88B1      		in r24,0x8
 262 0036 8C7F      		andi r24,lo8(-4)
 263 0038 88B9      		out 0x8,r24
 127:OA_Beacon.c   ****         /* enable the analog comparator */
 265               	.LM24:
 266 003a A39A      		sbi 0x14,3
 129:OA_Beacon.c   ****         /* Enable analog comparator interrupt */
 268               	.LM25:
 269 003c 4798      		cbi 0x8,7
 131:OA_Beacon.c   ****         
 271               	.LM26:
 272 003e 439A      		sbi 0x8,3
 140:OA_Beacon.c   **** 
 274               	.LM27:
 275 0040 80E1      		ldi r24,lo8(16)
 276 0042 88BB      		out 0x18,r24
 155:OA_Beacon.c   **** 	/* Enable PIN Change interrupt */
 278               	.LM28:
 279 0044 AC9A      		sbi 0x15,4
 157:OA_Beacon.c   **** 
 281               	.LM29:
 282 0046 8BB7      		in r24,0x3b
 283 0048 8062      		ori r24,lo8(32)
 284 004a 8BBF      		out 0x3b,r24
 163:OA_Beacon.c   ****         
 286               	.LM30:
 287 004c 85B7      		in r24,0x35
 288 004e 877E      		andi r24,lo8(-25)
 289 0050 85BF      		out 0x35,r24
 165:OA_Beacon.c   **** 
 291               	.LM31:
 292               	/* #APP */
 293               	 ;  165 "OA_Beacon.c" 1
 294 0052 7894      		sei
 295               	 ;  0 "" 2
 296               	/* #NOAPP */
 297               	.LBE5:
 298               	.LBE4:
 177:OA_Beacon.c   ****   /*
 178:OA_Beacon.c   ****    * Our modus of operation.
 179:OA_Beacon.c   ****    * MODE_IDLE means we watch out for a change from the analog comparator
 180:OA_Beacon.c   ****    * MODE_DEEP_SLEEP means we are waiting to start the beacon
 181:OA_Beacon.c   ****    */
 182:OA_Beacon.c   ****  enum
 183:OA_Beacon.c   ****   {
 184:OA_Beacon.c   ****     MODE_IDLE,
 185:OA_Beacon.c   ****     MODE_WAIT,
 186:OA_Beacon.c   **** 	  MODE_CHANGE,
 187:OA_Beacon.c   ****     MODE_DEEP_SLEEP
 188:OA_Beacon.c   ****   } __attribute__((packed)) mode = MODE_IDLE;
 189:OA_Beacon.c   ****   
 190:OA_Beacon.c   ****      
 191:OA_Beacon.c   **** 
 192:OA_Beacon.c   ****     uint8_t wait_state = INITIAL_WAIT; // holds the number of blink sequences to wait before really
 193:OA_Beacon.c   ****     
 194:OA_Beacon.c   **** 
 195:OA_Beacon.c   **** 	/* initialize the hardware */
 196:OA_Beacon.c   ****   ioinit();
 197:OA_Beacon.c   **** 
 198:OA_Beacon.c   **** /* set the intfalgs.anacomp to initialize the state of the beacon */
 199:OA_Beacon.c   **** intflags.anacomp_int = 1;
 300               	.LM32:
 301 0054 8091 0000 		lds r24,intflags
 302 0058 8460      		ori r24,lo8(1<<2)
 303 005a 8093 0000 		sts intflags,r24
 192:OA_Beacon.c   ****     
 305               	.LM33:
 306 005e 95E0      		ldi r25,lo8(5)
 188:OA_Beacon.c   ****   
 308               	.LM34:
 309 0060 80E0      		ldi r24,0
 200:OA_Beacon.c   **** 
 201:OA_Beacon.c   ****   for (;;)
 202:OA_Beacon.c   ****     {
 203:OA_Beacon.c   **** 		
 204:OA_Beacon.c   ****       /* allways check for on/off state */
 205:OA_Beacon.c   ****       /* The pin change interrupt is for waking the MCU. We ingnore the flag */
 206:OA_Beacon.c   ****       if (intflags.pinchange_int)
 207:OA_Beacon.c   ****         {
 208:OA_Beacon.c   ****           intflags.pinchange_int = 0;
 209:OA_Beacon.c   ****         }
 210:OA_Beacon.c   **** 
 211:OA_Beacon.c   ****       /* check the staus of the ENABLE_FLASH_PIN */
 212:OA_Beacon.c   ****         if (bit_is_clear(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 213:OA_Beacon.c   ****           {
 214:OA_Beacon.c   ****             /* shut down the beacon and set in deepsleep */
 215:OA_Beacon.c   ****             
 216:OA_Beacon.c   ****             /*DEBUG skip deep sleep until we get the MCU in right states*/
 217:OA_Beacon.c   ****             //set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 218:OA_Beacon.c   ****            
 219:OA_Beacon.c   ****             mode = MODE_DEEP_SLEEP;
 220:OA_Beacon.c   ****             
 221:OA_Beacon.c   ****             /* do some cleanup*/
 222:OA_Beacon.c   ****             /* disable the pwm and timer0 */
 223:OA_Beacon.c   ****             /* disable the timer0 interrupt */
 224:OA_Beacon.c   ****             TIMSK &= ~_BV(TOIE0);
 225:OA_Beacon.c   ****             /* Stop timing sequence by setting the prescaler to 0 */
 226:OA_Beacon.c   ****             TCCR0B = TMR0_PRESC_0;
 227:OA_Beacon.c   ****             /* disconnect compare match from the output pin FLASH (OCOA) */
 228:OA_Beacon.c   ****             TCCR0A &= ~_BV(COM0A1);
 229:OA_Beacon.c   ****             /* reset the timer0 counter register */
 230:OA_Beacon.c   ****             TCNT0 = 0;
 231:OA_Beacon.c   ****             /* power down the timer0 */
 232:OA_Beacon.c   ****             PRR |= _BV(PRTIM0);
 233:OA_Beacon.c   ****             /* disable the analog comparator interrupt*/
 234:OA_Beacon.c   ****             ACSR &= ~_BV(ACIE);
 235:OA_Beacon.c   ****             
 236:OA_Beacon.c   ****             /* enable FLASH as output after disconnection from timer */
 237:OA_Beacon.c   ****             FLASH_DDR |= _BV(FLASH);
 238:OA_Beacon.c   ****             /* TURN OFF the FLASH pin */
 239:OA_Beacon.c   ****             FLASHPORT &= ~_BV(FLASH);
 240:OA_Beacon.c   ****           }
 241:OA_Beacon.c   ****                         
 242:OA_Beacon.c   **** 
 243:OA_Beacon.c   **** 		/* For all interrupts check the system status */   
 244:OA_Beacon.c   **** 		  switch (mode)
 245:OA_Beacon.c   **** 			{
 246:OA_Beacon.c   ****         case MODE_IDLE:
 247:OA_Beacon.c   ****                     /*
 248:OA_Beacon.c   ****                     * The Beacon is in DAY or NIGHT MODE 
 249:OA_Beacon.c   ****                     * A voltage passing between the 1.1V threshold on the AMBIENT_LIGHT_ADC pin sho
 250:OA_Beacon.c   ****                     */
 251:OA_Beacon.c   **** 
 252:OA_Beacon.c   ****                     /* analog comparator interrupt flag set on toggle state*/
 253:OA_Beacon.c   ****                       if (intflags.anacomp_int)
 254:OA_Beacon.c   ****                       {
 255:OA_Beacon.c   ****                         /* an analog comparator interrupt has occured */
 256:OA_Beacon.c   ****                         /* reset the analog comparator interrupt flag */
 257:OA_Beacon.c   ****                         intflags.anacomp_int = 0;
 258:OA_Beacon.c   ****                         /* disable the analog comparator interrupt*/
 259:OA_Beacon.c   ****                         ACSR &= ~_BV(ACIE);
 260:OA_Beacon.c   **** 
 261:OA_Beacon.c   ****                         /* start the timer here to enable the wait state */
 262:OA_Beacon.c   ****                         /* power up the timer0 */
 263:OA_Beacon.c   ****                         PRR &= ~_BV(PRTIM0);
 264:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 265:OA_Beacon.c   ****                         TIMSK |= _BV(TOIE0);
 266:OA_Beacon.c   **** 
 267:OA_Beacon.c   ****                         /* check the status of the analog comparator and setup the current mode */
 268:OA_Beacon.c   ****                         if bit_is_set(ACSR, ACO){
 269:OA_Beacon.c   ****                             /* The analog comparator is positive (NIGHT) */
 270:OA_Beacon.c   **** 
 271:OA_Beacon.c   **** #if defined (__TestSetup_STK500__)                    
 272:OA_Beacon.c   ****   AMBIENT_LIGHT_PORT |= _BV(AMBIENT_LIGHT); // reflect this on the AMBIENT LIGHT PIN
 273:OA_Beacon.c   **** #endif
 274:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH */
 275:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 276:OA_Beacon.c   **** 
 277:OA_Beacon.c   ****                               /* enable the FLASH pin as output */
 278:OA_Beacon.c   ****                               FLASH_DDR |= _BV(FLASH);
 279:OA_Beacon.c   ****                               FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 280:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 281:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_V;                
 282:OA_Beacon.c   ****                         } 
 283:OA_Beacon.c   ****                             
 284:OA_Beacon.c   **** #if defined (__TestSetup_STK500__)
 285:OA_Beacon.c   ****                         else
 286:OA_Beacon.c   ****                             {
 287:OA_Beacon.c   ****                             /* The analog comparator is negative (DAY) */                    
 288:OA_Beacon.c   ****        AMBIENT_LIGHT_PORT &= ~_BV(AMBIENT_LIGHT);// reflect this on the AMBIENT LIGHT PIN
 289:OA_Beacon.c   ****                             } /* END else */
 290:OA_Beacon.c   **** #endif
 291:OA_Beacon.c   ****                             
 292:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 293:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_V;
 294:OA_Beacon.c   ****                         /* Change mode */
 295:OA_Beacon.c   ****                         mode = MODE_WAIT;
 296:OA_Beacon.c   **** 
 297:OA_Beacon.c   ****                       }       
 298:OA_Beacon.c   **** 				 break;
 299:OA_Beacon.c   **** 			
 300:OA_Beacon.c   ****       case MODE_WAIT:
 301:OA_Beacon.c   ****                 /* in this mode we wait some seconds before entering the new night or day mode */
 302:OA_Beacon.c   ****                 if (intflags.tmr0_int)
 303:OA_Beacon.c   ****                 {
 304:OA_Beacon.c   ****                   intflags.tmr0_int = 0;
 305:OA_Beacon.c   ****                   if (--wait_state == 0)
 306:OA_Beacon.c   ****                   { 
 307:OA_Beacon.c   ****                     wait_state = INITIAL_WAIT;
 308:OA_Beacon.c   ****                     mode = MODE_CHANGE; 
 309:OA_Beacon.c   ****                   }
 310:OA_Beacon.c   ****                 }
 311:OA_Beacon.c   ****                 
 312:OA_Beacon.c   ****           break;
 313:OA_Beacon.c   **** 			case MODE_CHANGE:
 314:OA_Beacon.c   ****                         /* check state of comparator after the wait to set the right mode */
 315:OA_Beacon.c   ****                         /* the state is detected even if the interrupt is disabled */
 316:OA_Beacon.c   ****                        if bit_is_set(ACSR, ACO){
 317:OA_Beacon.c   ****                             // FROM_DAY;
 318:OA_Beacon.c   ****                             /* last_mode == FROM_DAY */
 319:OA_Beacon.c   ****                             /* Enable the OCOA pin as output, start blinking */
 320:OA_Beacon.c   ****                             TCCR0A |= _BV(COM0A1);
 321:OA_Beacon.c   ****                         }
 322:OA_Beacon.c   ****                        else {
 323:OA_Beacon.c   ****                             // FROM_NIGHT;
 324:OA_Beacon.c   ****                             /* disable the pwm and timer0 */
 325:OA_Beacon.c   ****                             /* disable the timer0 interrupt */
 326:OA_Beacon.c   ****                             TIMSK &= ~_BV(TOIE0);
 327:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 328:OA_Beacon.c   ****                             TCCR0B = TMR0_PRESC_0;
 329:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 330:OA_Beacon.c   ****                             TCCR0A &= ~_BV(COM0A1);
 331:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 332:OA_Beacon.c   ****                             TCNT0 = 0;
 333:OA_Beacon.c   ****                             /* power down the timer0 */
 334:OA_Beacon.c   ****                             PRR |= _BV(PRTIM0);
 335:OA_Beacon.c   ****                             
 336:OA_Beacon.c   ****                            /* enable FLASH as output after disconnection from timer */
 337:OA_Beacon.c   ****                             FLASH_DDR |= _BV(FLASH);
 338:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 339:OA_Beacon.c   ****                             FLASHPORT &= ~_BV(FLASH);
 340:OA_Beacon.c   ****                             }
 341:OA_Beacon.c   ****                          
 342:OA_Beacon.c   ****                         
 343:OA_Beacon.c   ****                         /* change mode */
 344:OA_Beacon.c   ****                         mode = MODE_IDLE;
 345:OA_Beacon.c   ****                         /* Enable analog comparator interrupt */
 346:OA_Beacon.c   ****                         ACSR |= _BV(ACIE);                          
 347:OA_Beacon.c   ****        
 348:OA_Beacon.c   **** 					break;
 349:OA_Beacon.c   ****       case MODE_DEEP_SLEEP:
 350:OA_Beacon.c   ****                   /* check the status of the ENABLE_FLASH_PIN. Turn ON the Beacon? */
 351:OA_Beacon.c   ****                   /* we should only drop into this stat in a turn ON situation 
 352:OA_Beacon.c   ****                   * the pin change intrerupt will wake the MPU and we can go on
 353:OA_Beacon.c   ****                   */
 354:OA_Beacon.c   ****                   if (intflags.pinchange_int)
 355:OA_Beacon.c   ****                   {
 356:OA_Beacon.c   ****                     intflags.pinchange_int = 0;
 357:OA_Beacon.c   ****                   }
 358:OA_Beacon.c   **** 
 359:OA_Beacon.c   ****                     if (bit_is_set(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 360:OA_Beacon.c   ****                     {
 361:OA_Beacon.c   ****                      /* waking up the beacon*/
 362:OA_Beacon.c   ****                       /* sleep mode idle needed for the timer clocks to run */
 363:OA_Beacon.c   ****                       set_sleep_mode(SLEEP_MODE_IDLE);
 364:OA_Beacon.c   ****                       /* next mode MODE_IDLE*/
 365:OA_Beacon.c   ****                       mode = MODE_IDLE;
 366:OA_Beacon.c   ****                       /* start the timer to generate an interrupt to change mode*/
 367:OA_Beacon.c   ****                       /* power up the timer0 */
 368:OA_Beacon.c   ****                       PRR &= ~_BV(PRTIM0);
 369:OA_Beacon.c   ****                       /* enable the timer0 top interrupt */
 370:OA_Beacon.c   ****                       TIMSK |= _BV(TOIE0);
 371:OA_Beacon.c   ****                       /* disconnect compare match from the output pin FLASH */
 372:OA_Beacon.c   ****                       TCCR0A &= ~_BV(COM0A1);
 373:OA_Beacon.c   ****                       /* reset the timer0 counter register */
 374:OA_Beacon.c   ****                       TCNT0 = 0;
 375:OA_Beacon.c   ****                       /* start timing sequence by setting the prescaler */
 376:OA_Beacon.c   ****                       TCCR0B = TMR0_PRESC_V;
 311               	.LM35:
 312 0062 35E0      		ldi r19,lo8(5)
 328:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 314               	.LM36:
 315 0064 48EF      		ldi r20,lo8(-8)
 316               	.L15:
 206:OA_Beacon.c   ****         {
 318               	.LM37:
 319 0066 2091 0000 		lds r18,intflags
 206:OA_Beacon.c   ****         {
 321               	.LM38:
 322 006a 23FF      		sbrs r18,3
 323 006c 00C0      		rjmp .L5
 208:OA_Beacon.c   ****         }
 325               	.LM39:
 326 006e 2091 0000 		lds r18,intflags
 327 0072 277F      		andi r18,lo8(~(1<<3))
 328 0074 2093 0000 		sts intflags,r18
 329               	.L5:
 212:OA_Beacon.c   ****           {
 331               	.LM40:
 332 0078 B499      		sbic 0x16,4
 333 007a 00C0      		rjmp .L6
 224:OA_Beacon.c   ****             /* Stop timing sequence by setting the prescaler to 0 */
 335               	.LM41:
 336 007c 89B7      		in r24,0x39
 337 007e 8D7F      		andi r24,lo8(-3)
 338 0080 89BF      		out 0x39,r24
 226:OA_Beacon.c   ****             /* disconnect compare match from the output pin FLASH (OCOA) */
 340               	.LM42:
 341 0082 43BF      		out 0x33,r20
 228:OA_Beacon.c   ****             /* reset the timer0 counter register */
 343               	.LM43:
 344 0084 8AB5      		in r24,0x2a
 345 0086 8F77      		andi r24,lo8(127)
 346 0088 8ABD      		out 0x2a,r24
 230:OA_Beacon.c   ****             /* power down the timer0 */
 348               	.LM44:
 349 008a 12BE      		out 0x32,__zero_reg__
 232:OA_Beacon.c   ****             /* disable the analog comparator interrupt*/
 351               	.LM45:
 352 008c 80B5      		in r24,0x20
 353 008e 8460      		ori r24,lo8(4)
 354 0090 80BD      		out 0x20,r24
 234:OA_Beacon.c   ****             
 356               	.LM46:
 357 0092 4398      		cbi 0x8,3
 237:OA_Beacon.c   ****             /* TURN OFF the FLASH pin */
 359               	.LM47:
 360 0094 B89A      		sbi 0x17,0
 239:OA_Beacon.c   ****           }
 362               	.LM48:
 363 0096 C098      		cbi 0x18,0
 364               	.L7:
 354:OA_Beacon.c   ****                   {
 366               	.LM49:
 367 0098 8091 0000 		lds r24,intflags
 354:OA_Beacon.c   ****                   {
 369               	.LM50:
 370 009c 83FF      		sbrs r24,3
 371 009e 00C0      		rjmp .L14
 356:OA_Beacon.c   ****                   }
 373               	.LM51:
 374 00a0 8091 0000 		lds r24,intflags
 375 00a4 877F      		andi r24,lo8(~(1<<3))
 376 00a6 8093 0000 		sts intflags,r24
 377               	.L14:
 359:OA_Beacon.c   ****                     {
 379               	.LM52:
 380 00aa B49B      		sbis 0x16,4
 381 00ac 00C0      		rjmp .L17
 363:OA_Beacon.c   ****                       /* next mode MODE_IDLE*/
 383               	.LM53:
 384 00ae 85B7      		in r24,0x35
 385 00b0 877E      		andi r24,lo8(-25)
 386 00b2 85BF      		out 0x35,r24
 368:OA_Beacon.c   ****                       /* enable the timer0 top interrupt */
 388               	.LM54:
 389 00b4 80B5      		in r24,0x20
 390 00b6 8B7F      		andi r24,lo8(-5)
 391 00b8 80BD      		out 0x20,r24
 370:OA_Beacon.c   ****                       /* disconnect compare match from the output pin FLASH */
 393               	.LM55:
 394 00ba 89B7      		in r24,0x39
 395 00bc 8260      		ori r24,lo8(2)
 396 00be 89BF      		out 0x39,r24
 372:OA_Beacon.c   ****                       /* reset the timer0 counter register */
 398               	.LM56:
 399 00c0 8AB5      		in r24,0x2a
 400 00c2 8F77      		andi r24,lo8(127)
 401 00c4 8ABD      		out 0x2a,r24
 374:OA_Beacon.c   ****                       /* start timing sequence by setting the prescaler */
 403               	.LM57:
 404 00c6 12BE      		out 0x32,__zero_reg__
 406               	.LM58:
 407 00c8 33BF      		out 0x33,r19
 377:OA_Beacon.c   ****                       
 378:OA_Beacon.c   ****                       /* Enable analog comparator interrupt */
 379:OA_Beacon.c   ****                         ACSR |= _BV(ACIE); 
 409               	.LM59:
 410 00ca 439A      		sbi 0x8,3
 380:OA_Beacon.c   ****                       /* set the intfalgs.anacomp to initialize the state of the beacon */
 381:OA_Beacon.c   ****                       intflags.anacomp_int = 1;
 412               	.LM60:
 413 00cc 8091 0000 		lds r24,intflags
 414 00d0 8460      		ori r24,lo8(1<<2)
 415 00d2 8093 0000 		sts intflags,r24
 416 00d6 00C0      		rjmp .L16
 417               	.L6:
 244:OA_Beacon.c   **** 			{
 419               	.LM61:
 420 00d8 8230      		cpi r24,lo8(2)
 421 00da 01F0      		breq .L8
 422 00dc 8330      		cpi r24,lo8(3)
 423 00de 01F0      		breq .L7
 424 00e0 8130      		cpi r24,lo8(1)
 425 00e2 01F0      		breq .L9
 253:OA_Beacon.c   ****                       {
 427               	.LM62:
 428 00e4 8091 0000 		lds r24,intflags
 253:OA_Beacon.c   ****                       {
 430               	.LM63:
 431 00e8 82FF      		sbrs r24,2
 432 00ea 00C0      		rjmp .L16
 257:OA_Beacon.c   ****                         /* disable the analog comparator interrupt*/
 434               	.LM64:
 435 00ec 8091 0000 		lds r24,intflags
 436 00f0 8B7F      		andi r24,lo8(~(1<<2))
 437 00f2 8093 0000 		sts intflags,r24
 259:OA_Beacon.c   **** 
 439               	.LM65:
 440 00f6 4398      		cbi 0x8,3
 263:OA_Beacon.c   ****                         /* enable the timer0 top interrupt */
 442               	.LM66:
 443 00f8 80B5      		in r24,0x20
 444 00fa 8B7F      		andi r24,lo8(-5)
 445 00fc 80BD      		out 0x20,r24
 265:OA_Beacon.c   **** 
 447               	.LM67:
 448 00fe 89B7      		in r24,0x39
 449 0100 8260      		ori r24,lo8(2)
 450 0102 89BF      		out 0x39,r24
 268:OA_Beacon.c   ****                             /* The analog comparator is positive (NIGHT) */
 452               	.LM68:
 453 0104 459B      		sbis 0x8,5
 454 0106 00C0      		rjmp .L11
 275:OA_Beacon.c   **** 
 456               	.LM69:
 457 0108 8AB5      		in r24,0x2a
 458 010a 8F77      		andi r24,lo8(127)
 459 010c 8ABD      		out 0x2a,r24
 278:OA_Beacon.c   ****                               FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 461               	.LM70:
 462 010e B89A      		sbi 0x17,0
 279:OA_Beacon.c   ****                             /* start timing sequence by setting the prescaler */
 464               	.LM71:
 465 0110 C098      		cbi 0x18,0
 281:OA_Beacon.c   ****                         } 
 467               	.LM72:
 468 0112 33BF      		out 0x33,r19
 469               	.L11:
 293:OA_Beacon.c   ****                         /* Change mode */
 471               	.LM73:
 472 0114 33BF      		out 0x33,r19
 295:OA_Beacon.c   **** 
 474               	.LM74:
 475 0116 81E0      		ldi r24,lo8(1)
 476               	.L10:
 382:OA_Beacon.c   **** 
 383:OA_Beacon.c   ****                     }
 384:OA_Beacon.c   ****                   
 385:OA_Beacon.c   ****             break;
 386:OA_Beacon.c   ****                   
 387:OA_Beacon.c   ****                   
 388:OA_Beacon.c   **** 			}
 389:OA_Beacon.c   **** 			/*end case */
 390:OA_Beacon.c   ****         
 391:OA_Beacon.c   ****         /* The analog comparator is only enabled in the idle sleep mode (SLEEP_MODE_IDLE) */
 392:OA_Beacon.c   ****         /* Put the MCU in sleep and wait for next interrupt */
 393:OA_Beacon.c   ****         sleep_mode();
 478               	.LM75:
 479 0118 25B7      		in r18,0x35
 480 011a 2062      		ori r18,lo8(32)
 481 011c 25BF      		out 0x35,r18
 482               	/* #APP */
 483               	 ;  393 "OA_Beacon.c" 1
 484 011e 8895      		sleep
 485               		
 486               	 ;  0 "" 2
 487               	/* #NOAPP */
 488 0120 25B7      		in r18,0x35
 489 0122 2F7D      		andi r18,lo8(-33)
 490 0124 25BF      		out 0x35,r18
 206:OA_Beacon.c   ****         {
 492               	.LM76:
 493 0126 00C0      		rjmp .L15
 494               	.L9:
 302:OA_Beacon.c   ****                 {
 496               	.LM77:
 497 0128 2091 0000 		lds r18,intflags
 302:OA_Beacon.c   ****                 {
 499               	.LM78:
 500 012c 20FF      		sbrs r18,0
 501 012e 00C0      		rjmp .L10
 304:OA_Beacon.c   ****                   if (--wait_state == 0)
 503               	.LM79:
 504 0130 2091 0000 		lds r18,intflags
 505 0134 2E7F      		andi r18,lo8(~(1<<0))
 506 0136 2093 0000 		sts intflags,r18
 305:OA_Beacon.c   ****                   { 
 508               	.LM80:
 509 013a 9150      		subi r25,lo8(-(-1))
 510 013c 01F4      		brne .L10
 307:OA_Beacon.c   ****                     mode = MODE_CHANGE; 
 512               	.LM81:
 513 013e 95E0      		ldi r25,lo8(5)
 308:OA_Beacon.c   ****                   }
 515               	.LM82:
 516 0140 82E0      		ldi r24,lo8(2)
 517 0142 00C0      		rjmp .L10
 518               	.L8:
 316:OA_Beacon.c   ****                             // FROM_DAY;
 520               	.LM83:
 521 0144 459B      		sbis 0x8,5
 522 0146 00C0      		rjmp .L12
 320:OA_Beacon.c   ****                         }
 524               	.LM84:
 525 0148 8AB5      		in r24,0x2a
 526 014a 8068      		ori r24,lo8(-128)
 527 014c 8ABD      		out 0x2a,r24
 528               	.L13:
 346:OA_Beacon.c   ****        
 530               	.LM85:
 531 014e 439A      		sbi 0x8,3
 532               	.L16:
 533 0150 80E0      		ldi r24,0
 534 0152 00C0      		rjmp .L10
 535               	.L12:
 326:OA_Beacon.c   ****                             /* Stop timing sequence by setting the prescaler to 0 */
 537               	.LM86:
 538 0154 89B7      		in r24,0x39
 539 0156 8D7F      		andi r24,lo8(-3)
 540 0158 89BF      		out 0x39,r24
 328:OA_Beacon.c   ****                             /* disconnect compare match from the output pin FLASH (OCOA) */
 542               	.LM87:
 543 015a 43BF      		out 0x33,r20
 330:OA_Beacon.c   ****                             /* reset the timer0 counter register */
 545               	.LM88:
 546 015c 8AB5      		in r24,0x2a
 547 015e 8F77      		andi r24,lo8(127)
 548 0160 8ABD      		out 0x2a,r24
 332:OA_Beacon.c   ****                             /* power down the timer0 */
 550               	.LM89:
 551 0162 12BE      		out 0x32,__zero_reg__
 334:OA_Beacon.c   ****                             
 553               	.LM90:
 554 0164 80B5      		in r24,0x20
 555 0166 8460      		ori r24,lo8(4)
 556 0168 80BD      		out 0x20,r24
 337:OA_Beacon.c   ****                              /* TURN OFF the FLASH pin */
 558               	.LM91:
 559 016a B89A      		sbi 0x17,0
 339:OA_Beacon.c   ****                             }
 561               	.LM92:
 562 016c C098      		cbi 0x18,0
 563 016e 00C0      		rjmp .L13
 564               	.L17:
 565 0170 83E0      		ldi r24,lo8(3)
 566 0172 00C0      		rjmp .L10
 572               	.Lscope4:
 573               		.comm	intflags,1,1
 575               		.text
 577               	.Letext0:
 578               		.ident	"GCC: (Homebrew AVR GCC 9.4.0_1) 9.4.0"
 579               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 OA_Beacon.c
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:2      *ABS*:0000003e __SP_H__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:3      *ABS*:0000003d __SP_L__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:4      *ABS*:0000003f __SREG__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:6      *ABS*:00000001 __zero_reg__
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:117    .text:00000000 __vector_5
                            *ABS*:00000002 __gcc_isr.n_pushed.001
                            *COM*:00000001 intflags
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:142    .text:00000018 __vector_7
                            *ABS*:00000002 __gcc_isr.n_pushed.002
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:167    .text:00000030 __vector_2
                            *ABS*:00000002 __gcc_isr.n_pushed.003
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:197    .text.startup:00000000 main
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:9      .text:00000000 .Ltext0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:119    .text:00000000 .LM0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:127    .text:00000006 .LM1
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:133    .text:00000010 .LM2
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:144    .text:00000018 .LM3
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:152    .text:0000001e .LM4
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:158    .text:00000028 .LM5
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:169    .text:00000030 .LM6
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:178    .text:00000038 .LM7
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:186    .text:00000046 .LM8
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:199    .text.startup:00000000 .LM9
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:208    .text.startup:00000000 .LM10
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:212    .text.startup:00000004 .LM11
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:216    .text.startup:00000008 .LM12
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:221    .text.startup:0000000e .LM13
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:226    .text.startup:00000014 .LM14
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:230    .text.startup:00000018 .LM15
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:233    .text.startup:0000001a .LM16
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:238    .text.startup:00000020 .LM17
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:243    .text.startup:00000026 .LM18
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:246    .text.startup:00000028 .LM19
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:249    .text.startup:0000002a .LM20
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:254    .text.startup:00000030 .LM21
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:257    .text.startup:00000032 .LM22
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:260    .text.startup:00000034 .LM23
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:265    .text.startup:0000003a .LM24
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:268    .text.startup:0000003c .LM25
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:271    .text.startup:0000003e .LM26
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:274    .text.startup:00000040 .LM27
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:278    .text.startup:00000044 .LM28
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:281    .text.startup:00000046 .LM29
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:286    .text.startup:0000004c .LM30
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:291    .text.startup:00000052 .LM31
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:300    .text.startup:00000054 .LM32
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:305    .text.startup:0000005e .LM33
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:308    .text.startup:00000060 .LM34
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:311    .text.startup:00000062 .LM35
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:314    .text.startup:00000064 .LM36
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:318    .text.startup:00000066 .LM37
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:321    .text.startup:0000006a .LM38
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:325    .text.startup:0000006e .LM39
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:331    .text.startup:00000078 .LM40
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:335    .text.startup:0000007c .LM41
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:340    .text.startup:00000082 .LM42
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:343    .text.startup:00000084 .LM43
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:348    .text.startup:0000008a .LM44
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:351    .text.startup:0000008c .LM45
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:356    .text.startup:00000092 .LM46
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:359    .text.startup:00000094 .LM47
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:362    .text.startup:00000096 .LM48
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:366    .text.startup:00000098 .LM49
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:369    .text.startup:0000009c .LM50
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:373    .text.startup:000000a0 .LM51
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:379    .text.startup:000000aa .LM52
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:383    .text.startup:000000ae .LM53
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:388    .text.startup:000000b4 .LM54
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:393    .text.startup:000000ba .LM55
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:398    .text.startup:000000c0 .LM56
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:403    .text.startup:000000c6 .LM57
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:406    .text.startup:000000c8 .LM58
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:409    .text.startup:000000ca .LM59
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:412    .text.startup:000000cc .LM60
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:419    .text.startup:000000d8 .LM61
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:427    .text.startup:000000e4 .LM62
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:430    .text.startup:000000e8 .LM63
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:434    .text.startup:000000ec .LM64
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:439    .text.startup:000000f6 .LM65
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:442    .text.startup:000000f8 .LM66
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:447    .text.startup:000000fe .LM67
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:452    .text.startup:00000104 .LM68
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:456    .text.startup:00000108 .LM69
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:461    .text.startup:0000010e .LM70
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:464    .text.startup:00000110 .LM71
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:467    .text.startup:00000112 .LM72
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:471    .text.startup:00000114 .LM73
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:474    .text.startup:00000116 .LM74
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:478    .text.startup:00000118 .LM75
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:492    .text.startup:00000126 .LM76
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:496    .text.startup:00000128 .LM77
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:499    .text.startup:0000012c .LM78
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:503    .text.startup:00000130 .LM79
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:508    .text.startup:0000013a .LM80
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:512    .text.startup:0000013e .LM81
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:515    .text.startup:00000140 .LM82
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:520    .text.startup:00000144 .LM83
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:524    .text.startup:00000148 .LM84
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:530    .text.startup:0000014e .LM85
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:537    .text.startup:00000154 .LM86
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:542    .text.startup:0000015a .LM87
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:545    .text.startup:0000015c .LM88
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:550    .text.startup:00000162 .LM89
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:553    .text.startup:00000164 .LM90
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:558    .text.startup:0000016a .LM91
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:561    .text.startup:0000016c .LM92
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:572    .text.startup:00000174 .Lscope4
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:577    .text:00000050 .Letext0
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:329    .text.startup:00000078 .L5
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:417    .text.startup:000000d8 .L6
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:377    .text.startup:000000aa .L14
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:564    .text.startup:00000170 .L17
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:532    .text.startup:00000150 .L16
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:518    .text.startup:00000144 .L8
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:364    .text.startup:00000098 .L7
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:494    .text.startup:00000128 .L9
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:469    .text.startup:00000114 .L11
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:316    .text.startup:00000066 .L15
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:476    .text.startup:00000118 .L10
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:535    .text.startup:00000154 .L12
/var/folders/5q/f38rkw6s47l_f5mvx2vsh8m00000gq/T//cc1vNuJ2.s:528    .text.startup:0000014e .L13

UNDEFINED SYMBOLS
__do_clear_bss


OA_Beacon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002c6  2**0
                  ALLOC
  3 .stab         000009a8  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7b  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000040  00000000  00000000  00001b38  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000046c  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000410  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000103  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ec  00000000  00000000  000024f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__vector_2>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	29 c0       	rjmp	.+82     	; 0x62 <__vector_7>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	39 d0       	rcall	.+114    	; 0xae <main>
  3c:	f8 c0       	rjmp	.+496    	; 0x22e <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_5>:


/* Part 3: Interrupt service routines */
	
	
ISR(TIM0_OVF_vect){
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
	intflags.tmr0_int = 1;		/* Mark the occurence of timer0 overflow interrupt */
  4c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
  56:	8f 91       	pop	r24
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

00000062 <__vector_7>:

ISR(ANA_COMP_vect){
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	8f 93       	push	r24
    intflags.anacomp_int = 1; /* Mark the occurence of an analog comparator interrupt*/
  6e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  72:	84 60       	ori	r24, 0x04	; 4
  74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  78:	8f 91       	pop	r24
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <__vector_2>:

ISR(PCINT0_vect){
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
    intflags.pinchange_int = 1; /* Mark the occurence of a pin change interrupt*/
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  96:	9f ef       	ldi	r25, 0xFF	; 255
  98:	90 fb       	bst	r25, 0
  9a:	83 f9       	bld	r24, 3
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  a0:	9f 91       	pop	r25
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <main>:
	ioinit(void)
{
        /* if useing a 8 MHz clock with 8 prescaler (1000000MHz) */
        /* Set MCU master clock prescaler to 64 for a CPU_FREQUENCY of 8MHz/64=125000Hz */
        /* signal a clockchage */
        CLKPR = _BV(7);
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	86 bd       	out	0x26, r24	; 38
        /* set prescaler to 64 */
        CLKPR = _BV(CLKPS2) | _BV(CLKPS1);
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	86 bd       	out	0x26, r24	; 38
   * Toggle pin OC0A (PB0) at counter compare match with OCR0A
   * The timer0 will be started by setting the prescaler (CS02..0 in TCCR0B)
   */
   
        /* set the timer to fast PWM mode */
        TCCR0A |= _BV(WGM01) | _BV(WGM00);
  b6:	8a b5       	in	r24, 0x2a	; 42
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	8a bd       	out	0x2a, r24	; 42
        /* Set to output compare match to set pin OC0A*/
        TCCR0A |= _BV(COM0A1);
  bc:	8a b5       	in	r24, 0x2a	; 42
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8a bd       	out	0x2a, r24	; 42
        /* set the timer compare value to desired FLASH ON counter cycles*/
        OCR0A = TMR0_PWM_TRESH;
  c2:	8b e0       	ldi	r24, 0x0B	; 11
  c4:	89 bd       	out	0x29, r24	; 41
        /* Set the FLASH (OC0A) pin as output */
        FLASH_DDR |= _BV(FLASH);
  c6:	b8 9a       	sbi	0x17, 0	; 23
        /* Enabel timer overflow interrupt*/
        TIMSK |= _BV(TOIE0);
  c8:	89 b7       	in	r24, 0x39	; 57
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	89 bf       	out	0x39, r24	; 57
        /* Start timing sequence by setting the prescaler */
        TCCR0B |= TMR0_PRESC_V;
  ce:	83 b7       	in	r24, 0x33	; 51
  d0:	85 60       	ori	r24, 0x05	; 5
  d2:	83 bf       	out	0x33, r24	; 51
 /*
  * Setup the analog comparator
  * Reference voltage 1,1V from bandgap voltage
  */
        /* Make sure the ADC is turned off */
        ADCSRA &= ~_BV(ADEN);
  d4:	37 98       	cbi	0x06, 7	; 6
        /* enable the ADC multiplexer on analog comparator input to choose the right pin input */
        ADCSRB |= _BV(ACME);
  d6:	1e 9a       	sbi	0x03, 6	; 3
        /* Set the adc multiplexer to pin PB3 */
        ADMUX |= _BV(MUX1) | _BV(MUX0);
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	87 b9       	out	0x07, r24	; 7
        /* Enable the adc bandgap selector for the analog comparator */
        ACSR |= _BV(ACBG);
  de:	46 9a       	sbi	0x08, 6	; 8
        /* Set the bandgap to 1.1V without external bypass capacitor, disconnected form PB0(AREF)*/
        ADMUX |= _BV(REFS1);
  e0:	3f 9a       	sbi	0x07, 7	; 7
        /* Set the interrupt mode to toggle on any EDGE */ /* from night to day to night */
        ACSR &= ~_BV(ACIS1) & ~_BV(ACIS0);
  e2:	88 b1       	in	r24, 0x08	; 8
  e4:	8c 7f       	andi	r24, 0xFC	; 252
  e6:	88 b9       	out	0x08, r24	; 8
        /* Disable the digital input buffer on AIN1 (the negative pin on the analog comparator)*/
        DIDR0 |= _BV(ADC3D);
  e8:	a3 9a       	sbi	0x14, 3	; 20
        /* enable the analog comparator */
        ACSR &= ~_BV(ACD);
  ea:	47 98       	cbi	0x08, 7	; 8
        /* Enable analog comparator interrupt */
        ACSR |= _BV(ACIE);
  ec:	43 9a       	sbi	0x08, 3	; 8
  /* Enable pull-ups for binary inputs *
   * Setting the PORTxn bits for pins configured as inputs,
   * DDRxn = 0, enables pullup resistors.
   */
        
        PORTB = _BV(ENABlE_FLASH_PIN);
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	88 bb       	out	0x18, r24	; 24

	/* 
	 * Enable extrenal interrupts on the input pins
	 */

	PCMSK |= _BV(PCINT4);
  f2:	ac 9a       	sbi	0x15, 4	; 21
	/* Enable PIN Change interrupt */
	GIMSK |= _BV(PCIE); 
  f4:	8b b7       	in	r24, 0x3b	; 59
  f6:	80 62       	ori	r24, 0x20	; 32
  f8:	8b bf       	out	0x3b, r24	; 59




  /* Start with idle sleep mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	87 7e       	andi	r24, 0xE7	; 231
  fe:	85 bf       	out	0x35, r24	; 53
        
	sei();			/* enable interrupts */
 100:	78 94       	sei

	/* initialize the hardware */
  ioinit();

/* set the intfalgs.anacomp to initialize the state of the beacon */
intflags.anacomp_int = 1;
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 106:	84 60       	ori	r24, 0x04	; 4
 108:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
    uint8_t wait_state = INITIAL_WAIT; // holds the number of blink sequences to wait before really changing the state
 10c:	95 e0       	ldi	r25, 0x05	; 5
  } __attribute__((packed)) mode = MODE_DEEP_SLEEP;
 10e:	83 e0       	ldi	r24, 0x03	; 3
                            // FROM_NIGHT;
                            /* disable the pwm and timer0 */
                            /* disable the timer0 interrupt */
                            TIMSK &= ~_BV(TOIE0);
                            /* Stop timing sequence by setting the prescaler to 0 */
                            TCCR0B = TMR0_PRESC_0;
 110:	48 ef       	ldi	r20, 0xF8	; 248
                        /* disconnect compare match from the output pin FLASH */
                        TCCR0A &= ~_BV(COM0A1);
                        /* reset the timer0 counter register */
                        TCNT0 = 0;
                        /* start timing sequence by setting the prescaler */
                        TCCR0B = TMR0_PRESC_V;
 112:	35 e0       	ldi	r19, 0x05	; 5
		  switch (mode)
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	09 f4       	brne	.+2      	; 0x11a <main+0x6c>
 118:	55 c0       	rjmp	.+170    	; 0x1c4 <main+0x116>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	09 f4       	brne	.+2      	; 0x120 <main+0x72>
 11e:	68 c0       	rjmp	.+208    	; 0x1f0 <main+0x142>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	09 f4       	brne	.+2      	; 0x126 <main+0x78>
 124:	41 c0       	rjmp	.+130    	; 0x1a8 <main+0xfa>
                   if (intflags.pinchange_int)
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 12a:	83 ff       	sbrs	r24, 3
 12c:	05 c0       	rjmp	.+10     	; 0x138 <main+0x8a>
                      intflags.pinchange_int = 0;
 12e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 132:	87 7f       	andi	r24, 0xF7	; 247
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
                    if (bit_is_clear(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 138:	b4 99       	sbic	0x16, 4	; 22
 13a:	1b c0       	rjmp	.+54     	; 0x172 <main+0xc4>
                        set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 13c:	85 b7       	in	r24, 0x35	; 53
 13e:	87 7e       	andi	r24, 0xE7	; 231
 140:	80 61       	ori	r24, 0x10	; 16
 142:	85 bf       	out	0x35, r24	; 53
                            TIMSK &= ~_BV(TOIE0);
 144:	89 b7       	in	r24, 0x39	; 57
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	89 bf       	out	0x39, r24	; 57
                            TCCR0B = TMR0_PRESC_0;
 14a:	43 bf       	out	0x33, r20	; 51
                            TCCR0A &= ~_BV(COM0A1);
 14c:	8a b5       	in	r24, 0x2a	; 42
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	8a bd       	out	0x2a, r24	; 42
                            TCNT0 = 0;
 152:	12 be       	out	0x32, r1	; 50
                            PRR |= _BV(PRTIM0);
 154:	80 b5       	in	r24, 0x20	; 32
 156:	84 60       	ori	r24, 0x04	; 4
 158:	80 bd       	out	0x20, r24	; 32
                            ACSR &= ~_BV(ACIE);
 15a:	43 98       	cbi	0x08, 3	; 8
                            FLASH_DDR |= _BV(FLASH);
 15c:	b8 9a       	sbi	0x17, 0	; 23
                            FLASHPORT &= ~_BV(FLASH);
 15e:	c0 98       	cbi	0x18, 0	; 24
                        mode = MODE_DEEP_SLEEP;
 160:	83 e0       	ldi	r24, 0x03	; 3
			}
			/*end case */
        
        /* The analog comparator is only enabled in the idle sleep mode (SLEEP_MODE_IDLE) */
        /* Put the MCU in sleep and wait for next interrupt */
        sleep_mode();
 162:	25 b7       	in	r18, 0x35	; 53
 164:	20 62       	ori	r18, 0x20	; 32
 166:	25 bf       	out	0x35, r18	; 53
 168:	88 95       	sleep
 16a:	25 b7       	in	r18, 0x35	; 53
 16c:	2f 7d       	andi	r18, 0xDF	; 223
 16e:	25 bf       	out	0x35, r18	; 53
		  switch (mode)
 170:	d1 cf       	rjmp	.-94     	; 0x114 <main+0x66>
                      if (intflags.anacomp_int)
 172:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 176:	82 ff       	sbrs	r24, 2
 178:	2b c0       	rjmp	.+86     	; 0x1d0 <main+0x122>
                        intflags.anacomp_int = 0;
 17a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
                        ACSR &= ~_BV(ACIE);
 184:	43 98       	cbi	0x08, 3	; 8
                        PRR &= ~_BV(PRTIM0);
 186:	80 b5       	in	r24, 0x20	; 32
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	80 bd       	out	0x20, r24	; 32
                        TIMSK |= _BV(TOIE0);
 18c:	89 b7       	in	r24, 0x39	; 57
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	89 bf       	out	0x39, r24	; 57
                        if bit_is_set(ACSR, ACO){
 192:	45 9b       	sbis	0x08, 5	; 8
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <main+0xf4>
                            TCCR0A &= ~_BV(COM0A1);
 196:	8a b5       	in	r24, 0x2a	; 42
 198:	8f 77       	andi	r24, 0x7F	; 127
 19a:	8a bd       	out	0x2a, r24	; 42
                              FLASH_DDR |= _BV(FLASH);
 19c:	b8 9a       	sbi	0x17, 0	; 23
                              FLASHPORT &= ~_BV(FLASH); // make sure the FLASH is OFF
 19e:	c0 98       	cbi	0x18, 0	; 24
                            TCCR0B = TMR0_PRESC_V;                
 1a0:	33 bf       	out	0x33, r19	; 51
                            TCCR0B = TMR0_PRESC_V;
 1a2:	33 bf       	out	0x33, r19	; 51
                        mode = MODE_WAIT;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	dd cf       	rjmp	.-70     	; 0x162 <main+0xb4>
                if (intflags.tmr0_int)
 1a8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 1ac:	20 ff       	sbrs	r18, 0
 1ae:	d9 cf       	rjmp	.-78     	; 0x162 <main+0xb4>
                  intflags.tmr0_int = 0;
 1b0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 1b4:	2e 7f       	andi	r18, 0xFE	; 254
 1b6:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
                  if (--wait_state == 0)
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	91 f6       	brne	.-92     	; 0x162 <main+0xb4>
                    wait_state = INITIAL_WAIT;
 1be:	95 e0       	ldi	r25, 0x05	; 5
                    mode = MODE_CHANGE; 
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	cf cf       	rjmp	.-98     	; 0x162 <main+0xb4>
                       if bit_is_set(ACSR, ACO){
 1c4:	45 9b       	sbis	0x08, 5	; 8
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <main+0x126>
                            TCCR0A |= _BV(COM0A1);
 1c8:	8a b5       	in	r24, 0x2a	; 42
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	8a bd       	out	0x2a, r24	; 42
                        ACSR |= _BV(ACIE);     
 1ce:	43 9a       	sbi	0x08, 3	; 8
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	c7 cf       	rjmp	.-114    	; 0x162 <main+0xb4>
                            TIMSK &= ~_BV(TOIE0);
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	89 bf       	out	0x39, r24	; 57
                            TCCR0B = TMR0_PRESC_0;
 1da:	43 bf       	out	0x33, r20	; 51
                            TCCR0A &= ~_BV(COM0A1);
 1dc:	8a b5       	in	r24, 0x2a	; 42
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	8a bd       	out	0x2a, r24	; 42
                            TCNT0 = 0;
 1e2:	12 be       	out	0x32, r1	; 50
                            PRR |= _BV(PRTIM0);
 1e4:	80 b5       	in	r24, 0x20	; 32
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	80 bd       	out	0x20, r24	; 32
                            FLASH_DDR |= _BV(FLASH);
 1ea:	b8 9a       	sbi	0x17, 0	; 23
                            FLASHPORT &= ~_BV(FLASH);
 1ec:	c0 98       	cbi	0x18, 0	; 24
 1ee:	ef cf       	rjmp	.-34     	; 0x1ce <main+0x120>
                  if (intflags.pinchange_int)
 1f0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 1f4:	23 ff       	sbrs	r18, 3
 1f6:	b5 cf       	rjmp	.-150    	; 0x162 <main+0xb4>
                    intflags.pinchange_int = 0;
 1f8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 1fc:	27 7f       	andi	r18, 0xF7	; 247
 1fe:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
                    if (bit_is_set(ENABlE_FLASH_PORT,ENABlE_FLASH_PIN))
 202:	b4 9b       	sbis	0x16, 4	; 22
 204:	ae cf       	rjmp	.-164    	; 0x162 <main+0xb4>
                      intflags.anacomp_int = 1;
 206:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
                      set_sleep_mode(SLEEP_MODE_IDLE);
 210:	85 b7       	in	r24, 0x35	; 53
 212:	87 7e       	andi	r24, 0xE7	; 231
 214:	85 bf       	out	0x35, r24	; 53
                        PRR &= ~_BV(PRTIM0);
 216:	80 b5       	in	r24, 0x20	; 32
 218:	8b 7f       	andi	r24, 0xFB	; 251
 21a:	80 bd       	out	0x20, r24	; 32
                        TIMSK |= _BV(TOIE0);
 21c:	89 b7       	in	r24, 0x39	; 57
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	89 bf       	out	0x39, r24	; 57
                        TCCR0A &= ~_BV(COM0A1);
 222:	8a b5       	in	r24, 0x2a	; 42
 224:	8f 77       	andi	r24, 0x7F	; 127
 226:	8a bd       	out	0x2a, r24	; 42
                        TCNT0 = 0;
 228:	12 be       	out	0x32, r1	; 50
                        TCCR0B = TMR0_PRESC_V;
 22a:	33 bf       	out	0x33, r19	; 51
 22c:	d0 cf       	rjmp	.-96     	; 0x1ce <main+0x120>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
